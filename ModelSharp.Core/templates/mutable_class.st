// Automatically generated by Model#
// DO NOT EDIT THIS FILE

$it.Using:create_using()$

namespace $it.Package$
{
    $it.Annotations:annotation()$
    public class $it.ImplementationName$ $if(it.Implements)$ : $it.Implements; separator=", "$ $endif$
    {
        #region Field Name Defines
        public static class PROPERTIES
        {
            $it.Properties:define()$
        }
        #endregion

        $it.Properties:property()$

        #region Get/Set by name
        
        public object GetField(string fieldName)
        {
            switch (fieldName)
            {
                $it.Properties:switch_getter()$
            }

            throw new ArgumentException("No gettable field named " + fieldName);
        }

        public void SetField(string fieldName, object value)
        {
$if(it.HasSettableProperties)$
            switch (fieldName)
            {
                $it.Properties:switch_setter()$
            }
$endif$

            throw new ArgumentException("No settable field named " + fieldName);
        }

        #endregion

        #region Property Notification

        public event PropertyChangingEventHandler PropertyChanging;
        public event PropertyChangedEventHandler PropertyChanged;

$if(it.HasSettableProperties)$
        private void OnPropertyChanging(string propertyName)
        {
            PropertyChangingEventHandler handler = PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        private void OnPropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
$endif$

        #endregion Property Notification
    }
}