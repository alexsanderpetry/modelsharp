// Automatically generated by Model#
// DO NOT EDIT THIS FILE

using System;
using System.ComponentModel;
using System.Linq.Expressions;
using org.pescuma.ModelSharp.Lib;
using System.Runtime.Serialization;
using System.Diagnostics;

namespace examples.extends
{

	[DataContract]
	[DebuggerDisplay("D[X={X}]")]
	public abstract class BaseD : B, INotifyPropertyChanging, INotifyChildPropertyChanging, INotifyPropertyChanged, INotifyChildPropertyChanged, ICloneable, ICopyable
	{
		#region Constructors
		
		protected BaseD()
		{
		}
		
		protected BaseD(BaseD other)
		: base(other)
		{
			this.x = other.X;
		}
		
		#endregion Constructors
		
		#region Property X
		
		[DataMember(Name = "X", Order = 0, IsRequired = false)]
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private double x;
		
		public double X
		{
			[DebuggerStepThrough]
			get {
				return GetX();
			}
			[DebuggerStepThrough]
			set {
				SetX(value);
			}
		}
		
		protected virtual double GetX()
		{
			return this.x;
		}
		
		protected virtual bool SetX(double x)
		{
			if (this.x == x)
				return false;
				
			NotifyPropertyChanging(() => X);
			
			this.x = x;
			
			NotifyPropertyChanged(() => X);
			
			return true;
		}
		
		#endregion Property X
		
		#region Property Notification
		
		#endregion Property Notification
		
		#region CopyFrom
		
		void ICopyable.CopyFrom(object other)
		{
			CopyFrom((D) other);
		}
		
		public virtual void CopyFrom(D other)
		{
			base.CopyFrom(other);
			X = other.X;
		}
		
		#endregion CopyFrom
		
		#region Clone
		
#pragma warning disable 109
		public new D Clone()
#pragma warning restore 109
		{
			return (D) ((ICloneable) this).Clone();
		}
		
		object ICloneable.Clone()
		{
			return new D((D) this);
		}
		
		#endregion Clone
	}
	
}
