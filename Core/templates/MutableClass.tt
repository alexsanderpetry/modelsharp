<#@ template language="C#" inherits="TemplateUtils" #>
<#@ import namespace="org.pescuma.ModelSharp.Core.model" #>
<#@ parameter name="it" type="org.pescuma.ModelSharp.Core.model.TypeInfo" #>
<#@ parameter name="class" type="System.String" #>
// Automatically generated by Model#
// DO NOT EDIT THIS FILE

<# ForEach("CreateUsing", it.Using); #>

<# if (it.Package != null) { #>
namespace <#= it.Package #>
{

<# } #>
<# if (it.Documentation != null) { #>
	/// <summary>
	/// <#= it.Documentation #>
	/// </summary>
<# } #>
<# ForEach("Annotation", it.Annotations); #>
<# ForEach("Annotation", it.BaseOnlyAnnotations); #>
	public abstract class <#= it.ImplementationName #> <# if (it.ExtendsOrImplements.Count > 0) { #>: <# ForEach(it.ExtendsOrImplements, separator: ", "); #> <# } #> 
	{
		#region Field Name Defines

<# if (it.BaseClass.IsGenerated) { #>
		public new class PROPERTIES : <#= it.Extends #>.PROPERTIES
<# } else { #>
		public class PROPERTIES
<# } #>
		{
<# ForEach("Define", it.Properties); #>
		}

		#endregion

		#region Constructors

		public <#= it.ImplementationName #>(<# ForEach("Param", it.ConstructorArguments, separator: ", "); #>)
		{
<# ForEach("MutableInitField", it.NonConstructorArgumentsNorComputedProperties); #>
<# ForEach("MutableParamToField", it.ConstructorArguments); #>
<# ForEach("ValidateIfRequiredInConstructor", it.Properties); #>
		}

<# if (it.Cloneable) { #>
		public <#= it.ImplementationName #>(<#= it.ImplementationName #> other)
<#		if (it.Extends != null) { #>
			: base(other)
<#		} #>
		{
<# ForEach("MutableOtherToField", it.NonComputedProperties); #>
<# ForEach("ValidateIfRequiredInConstructor", it.Properties); #>
		}

<# } #>
		#endregion

<# ForEach("Property", it.Properties); #>
		public virtual void CopyFrom(<#= it.Name #> other)
		{
<# // ForEach("ValidateIfRequiredInCopyFrom", it.Properties); #>
<# if (it.BaseClass.HasCopyFrom) { #>
			base.CopyFrom(other);
<# } #>
<# ForEach("MutableOtherCopyToField", it.NonComputedProperties); #>
		}

		#region Property Notification

<# Include("NotifyPropertyChange", it, "type", "Changing"); #>
<# Include("NotifyPropertyChange", it, "type", "Changed"); #>
		#endregion
<# if (it.Cloneable) { #>
		
		#region Clone

#pragma warning disable 109
		public new <#= it.Name #> Clone()
#pragma warning restore 109
		{
			return (<#= it.Name #>) ((ICloneable) this).Clone();
		}

		object ICloneable.Clone()
		{
			return new <#= it.Name #>((<#= it.Name #>) this);
		}

		#endregion
<# } #>
<# if (it.NeedOnDeserialization) { #>
		
		#region Serialization

		void IDeserializationCallback.OnDeserialization(object sender)
		{
<#		if (it.Extends != null) { #>
			// Call OnDeserialization in base class if it exists
			if (typeof(<#= it.Extends #>).GetInterface(typeof(IDeserializationCallback).FullName) != null)
			{
				var map = typeof(<#= it.Extends #>).GetInterfaceMap(typeof(IDeserializationCallback));
				map.TargetMethods[0].Invoke(this, new[] { sender });
			}

<#		} #>
<#		ForEach("MutableOnDeserialization", it.Properties); #>
		}

		#endregion
<# } #>
	}
<# if (it.Package != null) { #>

}
<# } #>