<#@ template language="C#" inherits="TemplateUtils" #>
<#@ import namespace="org.pescuma.ModelSharp.Core.model" #>
<#@ parameter name="it" type="org.pescuma.ModelSharp.Core.model.TypeInfo" #>
<#@ parameter name="class" type="System.String" #>
// Automatically generated by Model#
// DO NOT EDIT THIS FILE

<# ForEach("CreateUsing", it.Using); #>

<# if (it.Package != null) { #>
namespace <#= it.Package #>
{

<# } #>
	public class <#= class #>
	{
<# ForEach("BuilderField", it.Properties); #>

		public virtual <#= class #> Set(<#= it.Name #> other) 
		{
<# ForEach("BuilderSetFromOther", it.Properties); #>
			return this;
		}

<# // Setters
foreach(var prop in it.Properties) {
	if (prop.IsCollection) { 
		var col = (CollectionInfo) prop; #>
		public virtual <#= class #> Clear<#= col.Name #>() 
		{
			<#= col.PrivateName #>.Clear();
			return this;
		}
		public virtual <#= class #> AddTo<#= col.Name #>(<#= col.Contents #> <#= col.VarName #>) 
		{
			<#= col.PrivateName #>.Add(<#= col.VarName #>);
			return this;
		}
		public virtual <#= class #> AddTo<#= col.Name #>(IEnumerable<<#= col.Contents #>> <#= col.VarName #>) 
		{
			<#= col.PrivateName #>.AddRange(<#= col.VarName #>);
			return this;
		}

<#	} else { #>
		public virtual <#= class #> Set<#= prop.Name #>(<#= prop.TypeName #> <#= prop.VarName #>) 
		{
			<#= prop.PrivateName #> = <#= prop.VarName #>;
			return this;
		}

<#	}
} #>
		public virtual <#= it.Name #> Build()
		{
			return new <#= it.Name #>(<# ForEach("PrivateName", it.Properties, separator: ", "); #>);
		}
	}
<# if (it.Package != null) { #>

}
<# } #>