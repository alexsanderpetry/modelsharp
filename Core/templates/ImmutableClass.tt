<#@ template language="C#" inherits="TemplateUtils" #>
<#@ import namespace="org.pescuma.ModelSharp.Core.model" #>
<#@ parameter name="it" type="org.pescuma.ModelSharp.Core.model.TypeInfo" #>
<#@ parameter name="class" type="System.String" #>
// Automatically generated by Model#
// DO NOT EDIT THIS FILE

<# ForEach("CreateUsing", it.Using); #>

<# if (it.Package != null) { #>
namespace <#= it.Package #>
{

<# } #>
<# if (it.Documentation != null) { #>
	/// <summary>
	/// <#= it.Documentation #>
	/// </summary>
<# } #>
<# ForEach("Annotation", it.Annotations); #>
<# ForEach("Annotation", it.BaseOnlyAnnotations); #>
	public abstract class <#= it.ImplementationName #><# if(it.ExtendsOrImplements.Count > 0) { #> : <# ForEach(it.ExtendsOrImplements, separator:", "); #><# } #> 
	{
<# ForEach("ImmutableField", it.Properties); #>
		public <#= it.ImplementationName #>(<# ForEach("Param", it.NonComputedProperties, separator: ", "); #>)
		{
<# ForEach("ImmutableParamToField", it.Properties); #>
		}

<# if (it.Cloneable) { #>
		public <#= it.ImplementationName #>(<#= it.ImplementationName #> other)
<#		if (it.Extends != null) { #>
			: base(other)
<#		} #>
		{
<# ForEach("ImmutableOtherToField", it.Properties); #>
		}

<# } #>
<# ForEach("ImmutableProperty", it.Properties); #>
<# if (it.Cloneable) { #>
#pragma warning disable 109
		public new <#= it.Name #> Clone()
#pragma warning restore 109
		{
			return (<#= it.Name #>) ((ICloneable) this).Clone();
		}

		object ICloneable.Clone()
		{
			return new <#= it.Name #>((<#= it.Name #>) this);
		}
<# } #>
	}
<# if (it.Package != null) { #>

}
<# } #>