// Automatically generated by Model#
// DO NOT EDIT THIS FILE

using org.pescuma.ModelSharp.Lib;
using System.Collections.Specialized;
using System;
using System.ComponentModel;
using System.Runtime.Serialization;
using System.Diagnostics;

namespace examples.deepCopy
{

	[DataContract]
	[DebuggerDisplay("Person[HomeAddressCol={HomeAddressCol.Count}items WorkAddressCol={WorkAddressCol.Count}items LazyAddressCol={LazyAddressCol.Count}items StringCol={StringCol.Count}items StringCol2={StringCol2.Count}items DoubleCol={DoubleCol.Count}items DoubleCol2={DoubleCol2.Count}items HomeAddressProp={HomeAddressProp} WorkAddressProp={WorkAddressProp}]")]
	public abstract class BasePerson : INotifyPropertyChanging, INotifyChildPropertyChanging, INotifyPropertyChanged, INotifyChildPropertyChanged, ICloneable
	{
		#region Field Name Defines
		
		public class PROPERTIES
		{
			public const string HOME_ADDRESS_COL = "HomeAddressCol";
			public const string WORK_ADDRESS_COL = "WorkAddressCol";
			public const string LAZY_ADDRESS_COL = "LazyAddressCol";
			public const string STRING_COL = "StringCol";
			public const string STRING_COL2 = "StringCol2";
			public const string DOUBLE_COL = "DoubleCol";
			public const string DOUBLE_COL2 = "DoubleCol2";
			public const string HOME_ADDRESS_PROP = "HomeAddressProp";
			public const string WORK_ADDRESS_PROP = "WorkAddressProp";
		}
		
		#endregion
		
		#region Constructors
		
		public BasePerson()
		{
			_homeAddressCol = new ObservableList<Address>();
			AddHomeAddressColListListeners(_homeAddressCol);
			_workAddressCol = new ObservableList<Address>();
			AddWorkAddressColListListeners(_workAddressCol);
			_stringCol = new ObservableList<string>();
			AddStringColListListeners(_stringCol);
			_stringCol2 = new ObservableList<string>();
			AddStringCol2ListListeners(_stringCol2);
			_doubleCol = new ObservableList<double>();
			AddDoubleColListListeners(_doubleCol);
			_doubleCol2 = new ObservableList<double>();
			AddDoubleCol2ListListeners(_doubleCol2);
			AddHomeAddressPropListeners(_homeAddressProp);
			AddWorkAddressPropListeners(_workAddressProp);
		}
		
		public BasePerson(BasePerson other)
		{
			_homeAddressCol = new ObservableList<Address>();
			AddHomeAddressColListListeners(_homeAddressCol);
			foreach (Address otherItem in other.HomeAddressCol)
			{
				if (otherItem == null)
					_homeAddressCol.Add(null);
				else
					_homeAddressCol.Add(new Address(otherItem));
			}
			_workAddressCol = new ObservableList<Address>();
			AddWorkAddressColListListeners(_workAddressCol);
			_workAddressCol.AddRange(other.WorkAddressCol);
			if (other._lazyAddressCol != null)
			{
				_lazyAddressCol = new ObservableList<Address>();
				AddLazyAddressColListListeners(_lazyAddressCol);
				foreach (Address otherItem in other.LazyAddressCol)
				{
					if (otherItem == null)
						_lazyAddressCol.Add(null);
					else
						_lazyAddressCol.Add(new Address(otherItem));
				}
			}
			_stringCol = new ObservableList<string>();
			AddStringColListListeners(_stringCol);
			foreach (string otherItem in other.StringCol)
			{
				if (otherItem == null)
					_stringCol.Add(null);
				else
					_stringCol.Add(string.Copy(otherItem));
			}
			_stringCol2 = new ObservableList<string>();
			AddStringCol2ListListeners(_stringCol2);
			_stringCol2.AddRange(other.StringCol2);
			_doubleCol = new ObservableList<double>();
			AddDoubleColListListeners(_doubleCol);
			_doubleCol.AddRange(other.DoubleCol);
			_doubleCol2 = new ObservableList<double>();
			AddDoubleCol2ListListeners(_doubleCol2);
			_doubleCol2.AddRange(other.DoubleCol2);
			if (other.HomeAddressProp == null)
				_homeAddressProp = null;
			else
				_homeAddressProp = new Address(other.HomeAddressProp);
			AddHomeAddressPropListeners(_homeAddressProp);
			_workAddressProp = other.WorkAddressProp;
			AddWorkAddressPropListeners(_workAddressProp);
		}
		
		#endregion
		
		#region Property HomeAddressCol
		
		[DataMember(Name = "HomeAddressCol", Order = 0, IsRequired = false)]
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ObservableList<Address> _homeAddressCol;
		
		public ObservableList<Address> HomeAddressCol
		{
			[DebuggerStepThrough]
			get {
				return GetHomeAddressCol();
			}
		}
		
		protected virtual ObservableList<Address> GetHomeAddressCol()
		{
			return _homeAddressCol;
		}
		
		private void AddHomeAddressColListListeners(object child)
		{
			if (child == null)
				return;
				
			var notifyPropertyChanging = child as INotifyPropertyChanging;
			if (notifyPropertyChanging != null)
				notifyPropertyChanging.PropertyChanging += HomeAddressColListPropertyChangingEventHandler;
				
			var notifyPropertyChanged = child as INotifyPropertyChanged;
			if (notifyPropertyChanged != null)
				notifyPropertyChanged.PropertyChanged += HomeAddressColListPropertyChangedEventHandler;
				
			var notifyChildPropertyChanged = child as INotifyCollectionChanged;
			if (notifyChildPropertyChanged != null)
				notifyChildPropertyChanged.CollectionChanged += HomeAddressColListChangedEventHandler;
		}
		
		private void HomeAddressColListPropertyChangingEventHandler(object sender, PropertyChangingEventArgs e)
		{
			if (e.PropertyName != ObservableList<Address>.PROPERTIES.ITEMS)
				return;
				
			NotifyPropertyChanging(PROPERTIES.HOME_ADDRESS_COL);
		}
		
		private void HomeAddressColListPropertyChangedEventHandler(object sender, PropertyChangedEventArgs e)
		{
			if (e.PropertyName != ObservableList<Address>.PROPERTIES.ITEMS)
				return;
				
			NotifyPropertyChanged(PROPERTIES.HOME_ADDRESS_COL);
		}
		
		private void HomeAddressColListChangedEventHandler(object sender, NotifyCollectionChangedEventArgs e)
		{
			switch (e.Action)
			{
				case NotifyCollectionChangedAction.Add:
				case NotifyCollectionChangedAction.Remove:
				case NotifyCollectionChangedAction.Replace:
				
					if ((e.OldItems == null || e.OldItems.Count == 0)
					        && (e.NewItems == null || e.NewItems.Count == 0))
						throw new InvalidOperationException();
						
					if (e.OldItems != null)
						foreach (var item in e.OldItems)
							RemoveHomeAddressColItemListeners(item);
							
					if (e.NewItems != null)
						foreach (var item in e.NewItems)
							AddHomeAddressColItemListeners(item);
							
					break;
				case NotifyCollectionChangedAction.Move:
					// Do nothing
					break;
				default:
					// NotifyCollectionChangedAction.Reset: The list should not fire this or
					// we can't control the items
					throw new InvalidOperationException();
			}
		}
		
		private void RemoveHomeAddressColItemListeners(object child)
		{
			if (child == null)
				return;
				
			var notifyPropertyChanging = child as INotifyPropertyChanging;
			if (notifyPropertyChanging != null)
				notifyPropertyChanging.PropertyChanging -= HomeAddressColItemPropertyChangingEventHandler;
				
			var notifyChildPropertyChanging = child as INotifyChildPropertyChanging;
			if (notifyChildPropertyChanging != null)
				notifyChildPropertyChanging.ChildPropertyChanging -= HomeAddressColItemChildPropertyChangingEventHandler;
				
			var notifyPropertyChanged = child as INotifyPropertyChanged;
			if (notifyPropertyChanged != null)
				notifyPropertyChanged.PropertyChanged -= HomeAddressColItemPropertyChangedEventHandler;
				
			var notifyChildPropertyChanged = child as INotifyChildPropertyChanged;
			if (notifyChildPropertyChanged != null)
				notifyChildPropertyChanged.ChildPropertyChanged -= HomeAddressColItemChildPropertyChangedEventHandler;
		}
		
		private void AddHomeAddressColItemListeners(object child)
		{
			if (child == null)
				return;
				
			var notifyPropertyChanging = child as INotifyPropertyChanging;
			if (notifyPropertyChanging != null)
				notifyPropertyChanging.PropertyChanging += HomeAddressColItemPropertyChangingEventHandler;
				
			var notifyChildPropertyChanging = child as INotifyChildPropertyChanging;
			if (notifyChildPropertyChanging != null)
				notifyChildPropertyChanging.ChildPropertyChanging += HomeAddressColItemChildPropertyChangingEventHandler;
				
			var notifyPropertyChanged = child as INotifyPropertyChanged;
			if (notifyPropertyChanged != null)
				notifyPropertyChanged.PropertyChanged += HomeAddressColItemPropertyChangedEventHandler;
				
			var notifyChildPropertyChanged = child as INotifyChildPropertyChanged;
			if (notifyChildPropertyChanged != null)
				notifyChildPropertyChanged.ChildPropertyChanged += HomeAddressColItemChildPropertyChangedEventHandler;
		}
		
		private void HomeAddressColItemPropertyChangingEventHandler(object sender, PropertyChangingEventArgs e)
		{
			NotifyChildPropertyChanging(PROPERTIES.HOME_ADDRESS_COL, sender, e);
		}
		
		private void HomeAddressColItemChildPropertyChangingEventHandler(object sender, ChildPropertyChangingEventArgs e)
		{
			NotifyChildPropertyChanging(PROPERTIES.HOME_ADDRESS_COL, sender, e);
		}
		
		private void HomeAddressColItemPropertyChangedEventHandler(object sender, PropertyChangedEventArgs e)
		{
			NotifyChildPropertyChanged(PROPERTIES.HOME_ADDRESS_COL, sender, e);
		}
		
		private void HomeAddressColItemChildPropertyChangedEventHandler(object sender, ChildPropertyChangedEventArgs e)
		{
			NotifyChildPropertyChanged(PROPERTIES.HOME_ADDRESS_COL, sender, e);
		}
		
		#endregion Property HomeAddressCol
		
		#region Property WorkAddressCol
		
		[DataMember(Name = "WorkAddressCol", Order = 1, IsRequired = false)]
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ObservableList<Address> _workAddressCol;
		
		public ObservableList<Address> WorkAddressCol
		{
			[DebuggerStepThrough]
			get {
				return GetWorkAddressCol();
			}
		}
		
		protected virtual ObservableList<Address> GetWorkAddressCol()
		{
			return _workAddressCol;
		}
		
		private void AddWorkAddressColListListeners(object child)
		{
			if (child == null)
				return;
				
			var notifyPropertyChanging = child as INotifyPropertyChanging;
			if (notifyPropertyChanging != null)
				notifyPropertyChanging.PropertyChanging += WorkAddressColListPropertyChangingEventHandler;
				
			var notifyPropertyChanged = child as INotifyPropertyChanged;
			if (notifyPropertyChanged != null)
				notifyPropertyChanged.PropertyChanged += WorkAddressColListPropertyChangedEventHandler;
				
			var notifyChildPropertyChanged = child as INotifyCollectionChanged;
			if (notifyChildPropertyChanged != null)
				notifyChildPropertyChanged.CollectionChanged += WorkAddressColListChangedEventHandler;
		}
		
		private void WorkAddressColListPropertyChangingEventHandler(object sender, PropertyChangingEventArgs e)
		{
			if (e.PropertyName != ObservableList<Address>.PROPERTIES.ITEMS)
				return;
				
			NotifyPropertyChanging(PROPERTIES.WORK_ADDRESS_COL);
		}
		
		private void WorkAddressColListPropertyChangedEventHandler(object sender, PropertyChangedEventArgs e)
		{
			if (e.PropertyName != ObservableList<Address>.PROPERTIES.ITEMS)
				return;
				
			NotifyPropertyChanged(PROPERTIES.WORK_ADDRESS_COL);
		}
		
		private void WorkAddressColListChangedEventHandler(object sender, NotifyCollectionChangedEventArgs e)
		{
			switch (e.Action)
			{
				case NotifyCollectionChangedAction.Add:
				case NotifyCollectionChangedAction.Remove:
				case NotifyCollectionChangedAction.Replace:
				
					if ((e.OldItems == null || e.OldItems.Count == 0)
					        && (e.NewItems == null || e.NewItems.Count == 0))
						throw new InvalidOperationException();
						
					if (e.OldItems != null)
						foreach (var item in e.OldItems)
							RemoveWorkAddressColItemListeners(item);
							
					if (e.NewItems != null)
						foreach (var item in e.NewItems)
							AddWorkAddressColItemListeners(item);
							
					break;
				case NotifyCollectionChangedAction.Move:
					// Do nothing
					break;
				default:
					// NotifyCollectionChangedAction.Reset: The list should not fire this or
					// we can't control the items
					throw new InvalidOperationException();
			}
		}
		
		private void RemoveWorkAddressColItemListeners(object child)
		{
			if (child == null)
				return;
				
			var notifyPropertyChanging = child as INotifyPropertyChanging;
			if (notifyPropertyChanging != null)
				notifyPropertyChanging.PropertyChanging -= WorkAddressColItemPropertyChangingEventHandler;
				
			var notifyChildPropertyChanging = child as INotifyChildPropertyChanging;
			if (notifyChildPropertyChanging != null)
				notifyChildPropertyChanging.ChildPropertyChanging -= WorkAddressColItemChildPropertyChangingEventHandler;
				
			var notifyPropertyChanged = child as INotifyPropertyChanged;
			if (notifyPropertyChanged != null)
				notifyPropertyChanged.PropertyChanged -= WorkAddressColItemPropertyChangedEventHandler;
				
			var notifyChildPropertyChanged = child as INotifyChildPropertyChanged;
			if (notifyChildPropertyChanged != null)
				notifyChildPropertyChanged.ChildPropertyChanged -= WorkAddressColItemChildPropertyChangedEventHandler;
		}
		
		private void AddWorkAddressColItemListeners(object child)
		{
			if (child == null)
				return;
				
			var notifyPropertyChanging = child as INotifyPropertyChanging;
			if (notifyPropertyChanging != null)
				notifyPropertyChanging.PropertyChanging += WorkAddressColItemPropertyChangingEventHandler;
				
			var notifyChildPropertyChanging = child as INotifyChildPropertyChanging;
			if (notifyChildPropertyChanging != null)
				notifyChildPropertyChanging.ChildPropertyChanging += WorkAddressColItemChildPropertyChangingEventHandler;
				
			var notifyPropertyChanged = child as INotifyPropertyChanged;
			if (notifyPropertyChanged != null)
				notifyPropertyChanged.PropertyChanged += WorkAddressColItemPropertyChangedEventHandler;
				
			var notifyChildPropertyChanged = child as INotifyChildPropertyChanged;
			if (notifyChildPropertyChanged != null)
				notifyChildPropertyChanged.ChildPropertyChanged += WorkAddressColItemChildPropertyChangedEventHandler;
		}
		
		private void WorkAddressColItemPropertyChangingEventHandler(object sender, PropertyChangingEventArgs e)
		{
			NotifyChildPropertyChanging(PROPERTIES.WORK_ADDRESS_COL, sender, e);
		}
		
		private void WorkAddressColItemChildPropertyChangingEventHandler(object sender, ChildPropertyChangingEventArgs e)
		{
			NotifyChildPropertyChanging(PROPERTIES.WORK_ADDRESS_COL, sender, e);
		}
		
		private void WorkAddressColItemPropertyChangedEventHandler(object sender, PropertyChangedEventArgs e)
		{
			NotifyChildPropertyChanged(PROPERTIES.WORK_ADDRESS_COL, sender, e);
		}
		
		private void WorkAddressColItemChildPropertyChangedEventHandler(object sender, ChildPropertyChangedEventArgs e)
		{
			NotifyChildPropertyChanged(PROPERTIES.WORK_ADDRESS_COL, sender, e);
		}
		
		#endregion Property WorkAddressCol
		
		#region Property LazyAddressCol
		
		[DataMember(Name = "LazyAddressCol", Order = 2, IsRequired = false)]
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private ObservableList<Address> _lazyAddressCol;
		
		public ObservableList<Address> LazyAddressCol
		{
			[DebuggerStepThrough]
			get {
				return GetLazyAddressCol();
			}
		}
		
		protected virtual void LazyInitLazyAddressCol()
		{
			if (_lazyAddressCol != null)
				return;
				
			_lazyAddressCol = new ObservableList<Address>();
			AddLazyAddressColListListeners(_lazyAddressCol);
		}
		
		protected virtual ObservableList<Address> GetLazyAddressCol()
		{
			LazyInitLazyAddressCol();
			return _lazyAddressCol;
		}
		
		private void AddLazyAddressColListListeners(object child)
		{
			if (child == null)
				return;
				
			var notifyPropertyChanging = child as INotifyPropertyChanging;
			if (notifyPropertyChanging != null)
				notifyPropertyChanging.PropertyChanging += LazyAddressColListPropertyChangingEventHandler;
				
			var notifyPropertyChanged = child as INotifyPropertyChanged;
			if (notifyPropertyChanged != null)
				notifyPropertyChanged.PropertyChanged += LazyAddressColListPropertyChangedEventHandler;
				
			var notifyChildPropertyChanged = child as INotifyCollectionChanged;
			if (notifyChildPropertyChanged != null)
				notifyChildPropertyChanged.CollectionChanged += LazyAddressColListChangedEventHandler;
		}
		
		private void LazyAddressColListPropertyChangingEventHandler(object sender, PropertyChangingEventArgs e)
		{
			if (e.PropertyName != ObservableList<Address>.PROPERTIES.ITEMS)
				return;
				
			NotifyPropertyChanging(PROPERTIES.LAZY_ADDRESS_COL);
		}
		
		private void LazyAddressColListPropertyChangedEventHandler(object sender, PropertyChangedEventArgs e)
		{
			if (e.PropertyName != ObservableList<Address>.PROPERTIES.ITEMS)
				return;
				
			NotifyPropertyChanged(PROPERTIES.LAZY_ADDRESS_COL);
		}
		
		private void LazyAddressColListChangedEventHandler(object sender, NotifyCollectionChangedEventArgs e)
		{
			switch (e.Action)
			{
				case NotifyCollectionChangedAction.Add:
				case NotifyCollectionChangedAction.Remove:
				case NotifyCollectionChangedAction.Replace:
				
					if ((e.OldItems == null || e.OldItems.Count == 0)
					        && (e.NewItems == null || e.NewItems.Count == 0))
						throw new InvalidOperationException();
						
					if (e.OldItems != null)
						foreach (var item in e.OldItems)
							RemoveLazyAddressColItemListeners(item);
							
					if (e.NewItems != null)
						foreach (var item in e.NewItems)
							AddLazyAddressColItemListeners(item);
							
					break;
				case NotifyCollectionChangedAction.Move:
					// Do nothing
					break;
				default:
					// NotifyCollectionChangedAction.Reset: The list should not fire this or
					// we can't control the items
					throw new InvalidOperationException();
			}
		}
		
		private void RemoveLazyAddressColItemListeners(object child)
		{
			if (child == null)
				return;
				
			var notifyPropertyChanging = child as INotifyPropertyChanging;
			if (notifyPropertyChanging != null)
				notifyPropertyChanging.PropertyChanging -= LazyAddressColItemPropertyChangingEventHandler;
				
			var notifyChildPropertyChanging = child as INotifyChildPropertyChanging;
			if (notifyChildPropertyChanging != null)
				notifyChildPropertyChanging.ChildPropertyChanging -= LazyAddressColItemChildPropertyChangingEventHandler;
				
			var notifyPropertyChanged = child as INotifyPropertyChanged;
			if (notifyPropertyChanged != null)
				notifyPropertyChanged.PropertyChanged -= LazyAddressColItemPropertyChangedEventHandler;
				
			var notifyChildPropertyChanged = child as INotifyChildPropertyChanged;
			if (notifyChildPropertyChanged != null)
				notifyChildPropertyChanged.ChildPropertyChanged -= LazyAddressColItemChildPropertyChangedEventHandler;
		}
		
		private void AddLazyAddressColItemListeners(object child)
		{
			if (child == null)
				return;
				
			var notifyPropertyChanging = child as INotifyPropertyChanging;
			if (notifyPropertyChanging != null)
				notifyPropertyChanging.PropertyChanging += LazyAddressColItemPropertyChangingEventHandler;
				
			var notifyChildPropertyChanging = child as INotifyChildPropertyChanging;
			if (notifyChildPropertyChanging != null)
				notifyChildPropertyChanging.ChildPropertyChanging += LazyAddressColItemChildPropertyChangingEventHandler;
				
			var notifyPropertyChanged = child as INotifyPropertyChanged;
			if (notifyPropertyChanged != null)
				notifyPropertyChanged.PropertyChanged += LazyAddressColItemPropertyChangedEventHandler;
				
			var notifyChildPropertyChanged = child as INotifyChildPropertyChanged;
			if (notifyChildPropertyChanged != null)
				notifyChildPropertyChanged.ChildPropertyChanged += LazyAddressColItemChildPropertyChangedEventHandler;
		}
		
		private void LazyAddressColItemPropertyChangingEventHandler(object sender, PropertyChangingEventArgs e)
		{
			NotifyChildPropertyChanging(PROPERTIES.LAZY_ADDRESS_COL, sender, e);
		}
		
		private void LazyAddressColItemChildPropertyChangingEventHandler(object sender, ChildPropertyChangingEventArgs e)
		{
			NotifyChildPropertyChanging(PROPERTIES.LAZY_ADDRESS_COL, sender, e);
		}
		
		private void LazyAddressColItemPropertyChangedEventHandler(object sender, PropertyChangedEventArgs e)
		{
			NotifyChildPropertyChanged(PROPERTIES.LAZY_ADDRESS_COL, sender, e);
		}
		
		private void LazyAddressColItemChildPropertyChangedEventHandler(object sender, ChildPropertyChangedEventArgs e)
		{
			NotifyChildPropertyChanged(PROPERTIES.LAZY_ADDRESS_COL, sender, e);
		}
		
		#endregion Property LazyAddressCol
		
		#region Property StringCol
		
		[DataMember(Name = "StringCol", Order = 3, IsRequired = false)]
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ObservableList<string> _stringCol;
		
		public ObservableList<string> StringCol
		{
			[DebuggerStepThrough]
			get {
				return GetStringCol();
			}
		}
		
		protected virtual ObservableList<string> GetStringCol()
		{
			return _stringCol;
		}
		
		private void AddStringColListListeners(object child)
		{
			if (child == null)
				return;
				
			var notifyPropertyChanging = child as INotifyPropertyChanging;
			if (notifyPropertyChanging != null)
				notifyPropertyChanging.PropertyChanging += StringColListPropertyChangingEventHandler;
				
			var notifyPropertyChanged = child as INotifyPropertyChanged;
			if (notifyPropertyChanged != null)
				notifyPropertyChanged.PropertyChanged += StringColListPropertyChangedEventHandler;
		}
		
		private void StringColListPropertyChangingEventHandler(object sender, PropertyChangingEventArgs e)
		{
			if (e.PropertyName != ObservableList<string>.PROPERTIES.ITEMS)
				return;
				
			NotifyPropertyChanging(PROPERTIES.STRING_COL);
		}
		
		private void StringColListPropertyChangedEventHandler(object sender, PropertyChangedEventArgs e)
		{
			if (e.PropertyName != ObservableList<string>.PROPERTIES.ITEMS)
				return;
				
			NotifyPropertyChanged(PROPERTIES.STRING_COL);
		}
		
		#endregion Property StringCol
		
		#region Property StringCol2
		
		[DataMember(Name = "StringCol2", Order = 4, IsRequired = false)]
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ObservableList<string> _stringCol2;
		
		public ObservableList<string> StringCol2
		{
			[DebuggerStepThrough]
			get {
				return GetStringCol2();
			}
		}
		
		protected virtual ObservableList<string> GetStringCol2()
		{
			return _stringCol2;
		}
		
		private void AddStringCol2ListListeners(object child)
		{
			if (child == null)
				return;
				
			var notifyPropertyChanging = child as INotifyPropertyChanging;
			if (notifyPropertyChanging != null)
				notifyPropertyChanging.PropertyChanging += StringCol2ListPropertyChangingEventHandler;
				
			var notifyPropertyChanged = child as INotifyPropertyChanged;
			if (notifyPropertyChanged != null)
				notifyPropertyChanged.PropertyChanged += StringCol2ListPropertyChangedEventHandler;
		}
		
		private void StringCol2ListPropertyChangingEventHandler(object sender, PropertyChangingEventArgs e)
		{
			if (e.PropertyName != ObservableList<string>.PROPERTIES.ITEMS)
				return;
				
			NotifyPropertyChanging(PROPERTIES.STRING_COL2);
		}
		
		private void StringCol2ListPropertyChangedEventHandler(object sender, PropertyChangedEventArgs e)
		{
			if (e.PropertyName != ObservableList<string>.PROPERTIES.ITEMS)
				return;
				
			NotifyPropertyChanged(PROPERTIES.STRING_COL2);
		}
		
		#endregion Property StringCol2
		
		#region Property DoubleCol
		
		[DataMember(Name = "DoubleCol", Order = 5, IsRequired = false)]
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ObservableList<double> _doubleCol;
		
		public ObservableList<double> DoubleCol
		{
			[DebuggerStepThrough]
			get {
				return GetDoubleCol();
			}
		}
		
		protected virtual ObservableList<double> GetDoubleCol()
		{
			return _doubleCol;
		}
		
		private void AddDoubleColListListeners(object child)
		{
			if (child == null)
				return;
				
			var notifyPropertyChanging = child as INotifyPropertyChanging;
			if (notifyPropertyChanging != null)
				notifyPropertyChanging.PropertyChanging += DoubleColListPropertyChangingEventHandler;
				
			var notifyPropertyChanged = child as INotifyPropertyChanged;
			if (notifyPropertyChanged != null)
				notifyPropertyChanged.PropertyChanged += DoubleColListPropertyChangedEventHandler;
		}
		
		private void DoubleColListPropertyChangingEventHandler(object sender, PropertyChangingEventArgs e)
		{
			if (e.PropertyName != ObservableList<double>.PROPERTIES.ITEMS)
				return;
				
			NotifyPropertyChanging(PROPERTIES.DOUBLE_COL);
		}
		
		private void DoubleColListPropertyChangedEventHandler(object sender, PropertyChangedEventArgs e)
		{
			if (e.PropertyName != ObservableList<double>.PROPERTIES.ITEMS)
				return;
				
			NotifyPropertyChanged(PROPERTIES.DOUBLE_COL);
		}
		
		#endregion Property DoubleCol
		
		#region Property DoubleCol2
		
		[DataMember(Name = "DoubleCol2", Order = 6, IsRequired = false)]
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ObservableList<double> _doubleCol2;
		
		public ObservableList<double> DoubleCol2
		{
			[DebuggerStepThrough]
			get {
				return GetDoubleCol2();
			}
		}
		
		protected virtual ObservableList<double> GetDoubleCol2()
		{
			return _doubleCol2;
		}
		
		private void AddDoubleCol2ListListeners(object child)
		{
			if (child == null)
				return;
				
			var notifyPropertyChanging = child as INotifyPropertyChanging;
			if (notifyPropertyChanging != null)
				notifyPropertyChanging.PropertyChanging += DoubleCol2ListPropertyChangingEventHandler;
				
			var notifyPropertyChanged = child as INotifyPropertyChanged;
			if (notifyPropertyChanged != null)
				notifyPropertyChanged.PropertyChanged += DoubleCol2ListPropertyChangedEventHandler;
		}
		
		private void DoubleCol2ListPropertyChangingEventHandler(object sender, PropertyChangingEventArgs e)
		{
			if (e.PropertyName != ObservableList<double>.PROPERTIES.ITEMS)
				return;
				
			NotifyPropertyChanging(PROPERTIES.DOUBLE_COL2);
		}
		
		private void DoubleCol2ListPropertyChangedEventHandler(object sender, PropertyChangedEventArgs e)
		{
			if (e.PropertyName != ObservableList<double>.PROPERTIES.ITEMS)
				return;
				
			NotifyPropertyChanged(PROPERTIES.DOUBLE_COL2);
		}
		
		#endregion Property DoubleCol2
		
		#region Property HomeAddressProp
		
		[DataMember(Name = "HomeAddressProp", Order = 7, IsRequired = false)]
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Address _homeAddressProp;
		
		public Address HomeAddressProp
		{
			[DebuggerStepThrough]
			get {
				return GetHomeAddressProp();
			}
			[DebuggerStepThrough]
			set {
				SetHomeAddressProp(value);
			}
		}
		
		protected virtual Address GetHomeAddressProp()
		{
			return _homeAddressProp;
		}
		
		protected virtual bool SetHomeAddressProp(Address homeAddressProp)
		{
			if (_homeAddressProp == homeAddressProp)
				return false;
				
			NotifyPropertyChanging(PROPERTIES.HOME_ADDRESS_PROP);
			
			RemoveHomeAddressPropListeners(homeAddressProp);
			
			_homeAddressProp = homeAddressProp;
			
			AddHomeAddressPropListeners(homeAddressProp);
			
			NotifyPropertyChanged(PROPERTIES.HOME_ADDRESS_PROP);
			
			return true;
		}
		
		private void RemoveHomeAddressPropListeners(object child)
		{
			if (child == null)
				return;
				
			var notifyPropertyChanging = child as INotifyPropertyChanging;
			if (notifyPropertyChanging != null)
				notifyPropertyChanging.PropertyChanging -= HomeAddressPropPropertyChangingEventHandler;
				
			var notifyChildPropertyChanging = child as INotifyChildPropertyChanging;
			if (notifyChildPropertyChanging != null)
				notifyChildPropertyChanging.ChildPropertyChanging -= HomeAddressPropChildPropertyChangingEventHandler;
				
			var notifyPropertyChanged = child as INotifyPropertyChanged;
			if (notifyPropertyChanged != null)
				notifyPropertyChanged.PropertyChanged -= HomeAddressPropPropertyChangedEventHandler;
				
			var notifyChildPropertyChanged = child as INotifyChildPropertyChanged;
			if (notifyChildPropertyChanged != null)
				notifyChildPropertyChanged.ChildPropertyChanged -= HomeAddressPropChildPropertyChangedEventHandler;
		}
		
		private void AddHomeAddressPropListeners(object child)
		{
			if (child == null)
				return;
				
			var notifyPropertyChanging = child as INotifyPropertyChanging;
			if (notifyPropertyChanging != null)
				notifyPropertyChanging.PropertyChanging += HomeAddressPropPropertyChangingEventHandler;
				
			var notifyChildPropertyChanging = child as INotifyChildPropertyChanging;
			if (notifyChildPropertyChanging != null)
				notifyChildPropertyChanging.ChildPropertyChanging += HomeAddressPropChildPropertyChangingEventHandler;
				
			var notifyPropertyChanged = child as INotifyPropertyChanged;
			if (notifyPropertyChanged != null)
				notifyPropertyChanged.PropertyChanged += HomeAddressPropPropertyChangedEventHandler;
				
			var notifyChildPropertyChanged = child as INotifyChildPropertyChanged;
			if (notifyChildPropertyChanged != null)
				notifyChildPropertyChanged.ChildPropertyChanged += HomeAddressPropChildPropertyChangedEventHandler;
		}
		
		private void HomeAddressPropPropertyChangingEventHandler(object sender, PropertyChangingEventArgs e)
		{
			NotifyChildPropertyChanging(PROPERTIES.HOME_ADDRESS_PROP, sender, e);
		}
		
		private void HomeAddressPropChildPropertyChangingEventHandler(object sender, ChildPropertyChangingEventArgs e)
		{
			NotifyChildPropertyChanging(PROPERTIES.HOME_ADDRESS_PROP, sender, e);
		}
		
		private void HomeAddressPropPropertyChangedEventHandler(object sender, PropertyChangedEventArgs e)
		{
			NotifyChildPropertyChanged(PROPERTIES.HOME_ADDRESS_PROP, sender, e);
		}
		
		private void HomeAddressPropChildPropertyChangedEventHandler(object sender, ChildPropertyChangedEventArgs e)
		{
			NotifyChildPropertyChanged(PROPERTIES.HOME_ADDRESS_PROP, sender, e);
		}
		
		#endregion Property HomeAddressProp
		
		#region Property WorkAddressProp
		
		[DataMember(Name = "WorkAddressProp", Order = 8, IsRequired = false)]
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Address _workAddressProp;
		
		public Address WorkAddressProp
		{
			[DebuggerStepThrough]
			get {
				return GetWorkAddressProp();
			}
			[DebuggerStepThrough]
			set {
				SetWorkAddressProp(value);
			}
		}
		
		protected virtual Address GetWorkAddressProp()
		{
			return _workAddressProp;
		}
		
		protected virtual bool SetWorkAddressProp(Address workAddressProp)
		{
			if (_workAddressProp == workAddressProp)
				return false;
				
			NotifyPropertyChanging(PROPERTIES.WORK_ADDRESS_PROP);
			
			RemoveWorkAddressPropListeners(workAddressProp);
			
			_workAddressProp = workAddressProp;
			
			AddWorkAddressPropListeners(workAddressProp);
			
			NotifyPropertyChanged(PROPERTIES.WORK_ADDRESS_PROP);
			
			return true;
		}
		
		private void RemoveWorkAddressPropListeners(object child)
		{
			if (child == null)
				return;
				
			var notifyPropertyChanging = child as INotifyPropertyChanging;
			if (notifyPropertyChanging != null)
				notifyPropertyChanging.PropertyChanging -= WorkAddressPropPropertyChangingEventHandler;
				
			var notifyChildPropertyChanging = child as INotifyChildPropertyChanging;
			if (notifyChildPropertyChanging != null)
				notifyChildPropertyChanging.ChildPropertyChanging -= WorkAddressPropChildPropertyChangingEventHandler;
				
			var notifyPropertyChanged = child as INotifyPropertyChanged;
			if (notifyPropertyChanged != null)
				notifyPropertyChanged.PropertyChanged -= WorkAddressPropPropertyChangedEventHandler;
				
			var notifyChildPropertyChanged = child as INotifyChildPropertyChanged;
			if (notifyChildPropertyChanged != null)
				notifyChildPropertyChanged.ChildPropertyChanged -= WorkAddressPropChildPropertyChangedEventHandler;
		}
		
		private void AddWorkAddressPropListeners(object child)
		{
			if (child == null)
				return;
				
			var notifyPropertyChanging = child as INotifyPropertyChanging;
			if (notifyPropertyChanging != null)
				notifyPropertyChanging.PropertyChanging += WorkAddressPropPropertyChangingEventHandler;
				
			var notifyChildPropertyChanging = child as INotifyChildPropertyChanging;
			if (notifyChildPropertyChanging != null)
				notifyChildPropertyChanging.ChildPropertyChanging += WorkAddressPropChildPropertyChangingEventHandler;
				
			var notifyPropertyChanged = child as INotifyPropertyChanged;
			if (notifyPropertyChanged != null)
				notifyPropertyChanged.PropertyChanged += WorkAddressPropPropertyChangedEventHandler;
				
			var notifyChildPropertyChanged = child as INotifyChildPropertyChanged;
			if (notifyChildPropertyChanged != null)
				notifyChildPropertyChanged.ChildPropertyChanged += WorkAddressPropChildPropertyChangedEventHandler;
		}
		
		private void WorkAddressPropPropertyChangingEventHandler(object sender, PropertyChangingEventArgs e)
		{
			NotifyChildPropertyChanging(PROPERTIES.WORK_ADDRESS_PROP, sender, e);
		}
		
		private void WorkAddressPropChildPropertyChangingEventHandler(object sender, ChildPropertyChangingEventArgs e)
		{
			NotifyChildPropertyChanging(PROPERTIES.WORK_ADDRESS_PROP, sender, e);
		}
		
		private void WorkAddressPropPropertyChangedEventHandler(object sender, PropertyChangedEventArgs e)
		{
			NotifyChildPropertyChanged(PROPERTIES.WORK_ADDRESS_PROP, sender, e);
		}
		
		private void WorkAddressPropChildPropertyChangedEventHandler(object sender, ChildPropertyChangedEventArgs e)
		{
			NotifyChildPropertyChanged(PROPERTIES.WORK_ADDRESS_PROP, sender, e);
		}
		
		#endregion Property WorkAddressProp
		
		public virtual void CopyFrom(Person other)
		{
			HomeAddressCol.Clear();
			foreach (Address otherItem in other.HomeAddressCol)
			{
				if (otherItem == null)
					HomeAddressCol.Add(null);
				else
					HomeAddressCol.Add(new Address(otherItem));
			}
			WorkAddressCol.Clear();
			WorkAddressCol.AddRange(other.WorkAddressCol);
			if (other._lazyAddressCol != null)
			{
				LazyAddressCol.Clear();
				foreach (Address otherItem in other.LazyAddressCol)
				{
					if (otherItem == null)
						LazyAddressCol.Add(null);
					else
						LazyAddressCol.Add(new Address(otherItem));
				}
			}
			else
			{
				if (_lazyAddressCol != null)
					LazyAddressCol.Clear();
			}
			StringCol.Clear();
			foreach (string otherItem in other.StringCol)
			{
				if (otherItem == null)
					StringCol.Add(null);
				else
					StringCol.Add(string.Copy(otherItem));
			}
			StringCol2.Clear();
			StringCol2.AddRange(other.StringCol2);
			DoubleCol.Clear();
			DoubleCol.AddRange(other.DoubleCol);
			DoubleCol2.Clear();
			DoubleCol2.AddRange(other.DoubleCol2);
			if (other.HomeAddressProp == null)
				HomeAddressProp = null;
			else
				HomeAddressProp = new Address(other.HomeAddressProp);
			WorkAddressProp = other.WorkAddressProp;
		}
		
		#region Property Notification
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		protected virtual void NotifyPropertyChanging(string propertyName)
		{
			PropertyChangingEventHandler handler = PropertyChanging;
			if (handler != null)
				handler(this, new PropertyChangingEventArgs(propertyName));
		}
		
		public event ChildPropertyChangingEventHandler ChildPropertyChanging;
		
		protected virtual void NotifyChildPropertyChanging(string propertyName, object sender, PropertyChangingEventArgs e)
		{
			ChildPropertyChangingEventHandler handler = ChildPropertyChanging;
			if (handler != null)
				handler(sender, new ChildPropertyChangingEventArgs(this, propertyName, e));
		}
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void NotifyPropertyChanged(string propertyName)
		{
			PropertyChangedEventHandler handler = PropertyChanged;
			if (handler != null)
				handler(this, new PropertyChangedEventArgs(propertyName));
		}
		
		public event ChildPropertyChangedEventHandler ChildPropertyChanged;
		
		protected virtual void NotifyChildPropertyChanged(string propertyName, object sender, PropertyChangedEventArgs e)
		{
			ChildPropertyChangedEventHandler handler = ChildPropertyChanged;
			if (handler != null)
				handler(sender, new ChildPropertyChangedEventArgs(this, propertyName, sender, e));
		}
		
		#endregion
		
		#region Clone
		
#pragma warning disable 109
		public new Person Clone()
#pragma warning restore 109
		{
			return (Person) ((ICloneable) this).Clone();
		}
		
		object ICloneable.Clone()
		{
			return new Person((Person) this);
		}
		
		#endregion
	}
	
}
