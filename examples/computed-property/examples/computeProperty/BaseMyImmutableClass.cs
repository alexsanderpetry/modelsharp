// Automatically generated by Model#
// DO NOT EDIT THIS FILE

using System.Collections.ObjectModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Diagnostics;
using System;

namespace examples.computeProperty
{

	[DataContract]
	[DebuggerDisplay("MyImmutableClass[X={X} Y={Y} Children={Children.Count}items]")]
	public abstract class BaseMyImmutableClass : ICloneable
	{
		[DataMember(Name = "X", Order = 0, IsRequired = false)]
		public readonly double X;
		
		[DataMember(Name = "Y", Order = 1, IsRequired = false)]
		public readonly double Y;
		
		[DataMember(Name = "Children", Order = 2, IsRequired = false)]
		public readonly ReadOnlyCollection<MyClass> Children;
		
		public BaseMyImmutableClass(double x, double y, IEnumerable<MyClass> children)
		{
			X = x;
			Y = y;
			_squaredLengthCachedCacheValid = false;
			Children = new ReadOnlyCollection<MyClass>(new List<MyClass>(children));
		}
		
		public BaseMyImmutableClass(BaseMyImmutableClass other)
		{
			X = other.X;
			Y = other.Y;
			_squaredLengthCachedCacheValid = other._squaredLengthCachedCacheValid;
			_squaredLengthCachedCache = other._squaredLengthCachedCache;
			Children = new ReadOnlyCollection<MyClass>(new List<MyClass>(other.Children));
		}
		
		public virtual MyImmutableClass WithX(double x)
		{
			return new MyImmutableClass(x, Y, Children);
		}
		
		public virtual MyImmutableClass WithY(double y)
		{
			return new MyImmutableClass(X, y, Children);
		}
		
		public double Length
		{
			[DebuggerStepThrough]
			get {
				return ComputeLength();
			}
		}
		
		protected virtual double ComputeLength()
		{
			return Math.Sqrt(X * X + Y * Y);
		}
		
		public string Dummy
		{
			[DebuggerStepThrough]
			get {
				return ComputeDummy();
			}
		}
		
		protected abstract string ComputeDummy();
		
		public double SquaredLength
		{
			[DebuggerStepThrough]
			get {
				return ComputeSquaredLength();
			}
		}
		
		protected abstract double ComputeSquaredLength();
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private double _squaredLengthCachedCache;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool _squaredLengthCachedCacheValid;
		
		public double SquaredLengthCached
		{
			[DebuggerStepThrough]
			get {
				return ComputeAndCacheSquaredLengthCached();
			}
		}
		
		protected virtual void InvalidateSquaredLengthCachedCache()
		{
			_squaredLengthCachedCacheValid = false;
		}
		
		private double ComputeAndCacheSquaredLengthCached()
		{
			if (!_squaredLengthCachedCacheValid)
			{
				_squaredLengthCachedCache = ComputeSquaredLengthCached();
				_squaredLengthCachedCacheValid = true;
			}
			
			return _squaredLengthCachedCache;
		}
		
		protected abstract double ComputeSquaredLengthCached();
		
		public new MyImmutableClass Clone()
		{
			return (MyImmutableClass) ((ICloneable) this).Clone();
		}
		
		object ICloneable.Clone()
		{
			return new MyImmutableClass((MyImmutableClass) this);
		}
	}
	
}
