// Automatically generated by Model#
// DO NOT EDIT THIS FILE

using System;
using System.ComponentModel;
using org.pescuma.ModelSharp.Lib;
using System.Runtime.Serialization;
using System.Diagnostics;

namespace examples.collection
{

	[DataContract]
	[DebuggerDisplay("House[Address={Address}]")]
	public abstract class BaseHouse : INotifyPropertyChanging, INotifyChildPropertyChanging, INotifyPropertyChanged, INotifyChildPropertyChanged, ICloneable
	{
		#region Field Name Defines
		
		public class PROPERTIES
		{
			public const string ADDRESS = "Address";
		}
		
		#endregion
		
		#region Constructors
		
		public BaseHouse()
		{
		}
		
		public BaseHouse(BaseHouse other)
		{
			_address = other.Address;
		}
		
		#endregion
		
		#region Property Address
		
		[DataMember(Name = "Address", Order = 0, IsRequired = false)]
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _address;
		
		public string Address
		{
			[DebuggerStepThrough]
			get {
				return GetAddress();
			}
			[DebuggerStepThrough]
			set {
				SetAddress(value);
			}
		}
		
		protected virtual string GetAddress()
		{
			return _address;
		}
		
		protected virtual bool SetAddress(string address)
		{
			if (_address == address)
				return false;
				
			NotifyPropertyChanging(PROPERTIES.ADDRESS);
			
			_address = address;
			
			NotifyPropertyChanged(PROPERTIES.ADDRESS);
			
			return true;
		}
		
		#endregion Property Address
		
		public void CopyFrom(House other)
		{
			Address = other.Address;
		}
		
		#region Property Notification
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event ChildPropertyChangingEventHandler ChildPropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		public event ChildPropertyChangedEventHandler ChildPropertyChanged;
		
		protected void NotifyPropertyChanging(string propertyName)
		{
			PropertyChangingEventHandler handler = PropertyChanging;
			if (handler != null)
				handler(this, new PropertyChangingEventArgs(propertyName));
		}
		
		protected void NotifyChildPropertyChanging(string propertyName, object sender, PropertyChangingEventArgs e)
		{
			ChildPropertyChangingEventHandler handler = ChildPropertyChanging;
			if (handler != null)
				handler(sender, new ChildPropertyChangingEventArgs(this, propertyName, e));
		}
		
		protected void NotifyPropertyChanged(string propertyName)
		{
			PropertyChangedEventHandler handler = PropertyChanged;
			if (handler != null)
				handler(this, new PropertyChangedEventArgs(propertyName));
		}
		
		protected void NotifyChildPropertyChanged(string propertyName, object sender, PropertyChangedEventArgs e)
		{
			ChildPropertyChangedEventHandler handler = ChildPropertyChanged;
			if (handler != null)
				handler(sender, new ChildPropertyChangedEventArgs(this, propertyName, e));
		}
		
		#endregion
		
		#region Clone
		
		public House Clone()
		{
			return (House) ((ICloneable) this).Clone();
		}
		
		object ICloneable.Clone()
		{
			return new House((House) this);
		}
		
		#endregion
	}
	
}
