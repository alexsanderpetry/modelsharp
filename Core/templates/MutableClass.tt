<#@ template language="C#" inherits="TemplateUtils" #>
<#@ import namespace="org.pescuma.ModelSharp.Core.model" #>
<#@ parameter name="it" type="org.pescuma.ModelSharp.Core.model.TypeInfo" #>
//----------------------
// <auto-generated>
//     Automatically generated by Model#
// </auto-generated>
//----------------------
// DO NOT EDIT THIS FILE

using System.CodeDom.Compiler;
<# 	ForEach("CreateUsing", it.Using); #>

<# 	if (it.Package != null) { #>
namespace <#= it.Package #>
{

<# 	} #>
<# 	if (it.Documentation != null) { #>
	/// <summary>
	/// <#= it.Documentation #>
	/// </summary>
<# 	} #>
<# 	ForEach("Annotation", it.Annotations); #>
<# 	ForEach("Annotation", it.BaseOnlyAnnotations); #>
	[GeneratedCode("Model#", "<#= System.Reflection.Assembly.GetExecutingAssembly().GetName().Version #>")]
	public abstract class <#= it.ImplementationName #> <# if (it.ExtendsOrImplements.Count > 0) { #>: <# ForEach(it.ExtendsOrImplements, separator: ", "); #> <# } #> 
	{
		#region Field Name Defines

<# if (it.BaseClass.HasProperties) { #>
		public new class PROPERTIES : <#= it.Extends #>.PROPERTIES
<# } else { #>
		public class PROPERTIES
<# } #>
		{
<# ForEach("Define", it.Properties); #>

			protected PROPERTIES() {}
		}

		#endregion

		#region Constructors

		protected <#= it.ImplementationName #>(<# ForEach("Param", it.ConstructorArguments, separator: ", "); #>)
		{
<# 	ForEach("MutableInitField", it.NonConstructorArgumentsNorComputedProperties); #>
<# 	ForEach("MutableParamToField", it.ConstructorArguments); #>
<# 	ForEach("ValidateIfRequiredInConstructor", it.Properties); #>
		}

<# 	if (it.Cloneable) { #>
		protected <#= it.ImplementationName #>(<#= it.ImplementationName #> other)
<#		if (it.Extends != null) { #>
			: base(other)
<#		} #>
		{
<# 		ForEach("MutableOtherToField", it.NonComputedProperties); #>
<# 		ForEach("ValidateIfRequiredInConstructor", it.Properties); #>
		}

<# 	} #>
		#endregion Constructors

<# 	ForEach("Property", it.Properties); #>
		#region Property Notification

<# 	Include("NotifyPropertyChange", it, "type", "Changing"); #>
<# 	Include("NotifyPropertyChange", it, "type", "Changed"); #>
		#endregion Property Notification
<# 	if (it.Cloneable) { #>

		#region CopyFrom

		void ICopyable.CopyFrom(object other)
		{
			CopyFrom((<#= it.Name #>) other);
		}

		public virtual void CopyFrom(<#= it.Name #> other)
		{
<# 	// ForEach("ValidateIfRequiredInCopyFrom", it.Properties); #>
<# 		if (it.BaseClass.HasCopyFrom) { #>
			base.CopyFrom(other);
<# 		} #>
<# 		ForEach("MutableOtherCopyToField", it.NonComputedProperties); #>
		}

		#endregion CopyFrom
		
<#		Include("Clone", it); #>
<# 	} #>
<# 	if (it.NeedOnDeserialized || it.NeedOnDeserializing) { #>
		
		#region Serialization

<# 	if (it.NeedOnDeserializing) { #>
		[OnDeserializing]
		private void OnDeserializing(StreamingContext context)
		{
<#		ForEach("MutableSetFieldDefaultValue", it.Properties); #>
		}

<# 	} #>
<# 	if (it.NeedOnDeserialized) { #>
		[OnDeserialized]
		private void OnDeserialized(StreamingContext context)
		{
<#		ForEach("MutableOnDeserialization", it.Properties); #>
		}

<# 	} #>
		#endregion Serialization
<# 	} #>
<#		Include("Equals", it); #>
	}
<# 	if (it.Package != null) { #>

}
<# 	} #>