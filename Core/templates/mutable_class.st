// Automatically generated by Model#
// DO NOT EDIT THIS FILE

$it.Using:create_using()$

$if(it.Package)$
namespace $it.Package$
{
$endif$

	$it.Annotations:annotation()$
	public abstract class $it.ImplementationName$ $if(it.Implements)$ : $it.Implements; separator=", "$ $endif$
	{
		#region Field Name Defines

		public class PROPERTIES
		{
			$it.Properties:define()$
		}

		#endregion

		#region Constructors

		public $it.ImplementationName$($it.ContructorArguments:param(); separator=", "$)
		{
			$it.ContructorArguments:not_null_if_required()$
			$it.Properties:mutable_init_field()$
			$it.ContructorArguments:mutable_param_to_field()$
		}

		public $it.ImplementationName$($it.ImplementationName$ other)
		{
			$it.Properties:mutable_other_to_field()$
		}

		#endregion

		$it.Properties:property()$

		#region Get/Set by name and CopyFrom
		
		public object GetField(string fieldName)
		{
			switch (fieldName)
			{
				$it.Properties:switch_getter()$			}

			throw new ArgumentException("No gettable field named " + fieldName);
		}

		public void SetField(string fieldName, object value)
		{
$if(it.HasSettableProperties)$
			switch (fieldName)
			{
				$it.Properties:switch_setter()$			}


$endif$
			throw new ArgumentException("No settable field named " + fieldName);
		}

		public void CopyFrom($it.Name$ other)
		{
			$it.Properties:mutable_other_copyto_field()$
		}

		#endregion

		#region Property Notification

		public event PropertyChangingEventHandler PropertyChanging;
		public event ChildPropertyChangingEventHandler ChildPropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;
		public event ChildPropertyChangedEventHandler ChildPropertyChanged;

		protected void NotifyPropertyChanging(string propertyName)
		{
			PropertyChangingEventHandler handler = PropertyChanging;
			if (handler != null)
				handler(this, new PropertyChangingEventArgs(propertyName));
		}
		
		protected void NotifyChildPropertyChanging(string propertyName, object sender, PropertyChangingEventArgs e)
		{
			ChildPropertyChangingEventHandler handler = ChildPropertyChanging;
			if (handler != null)
				handler(this, new ChildPropertyChangingEventArgs(this, propertyName, e));
		}

		protected void NotifyPropertyChanged(string propertyName)
		{
			PropertyChangedEventHandler handler = PropertyChanged;
			if (handler != null)
				handler(this, new PropertyChangedEventArgs(propertyName));
		}
		
		protected void NotifyChildPropertyChanged(string propertyName, object sender, PropertyChangedEventArgs e)
		{
			ChildPropertyChangedEventHandler handler = ChildPropertyChanged;
			if (handler != null)
				handler(this, new ChildPropertyChangedEventArgs(this, propertyName, e));
		}

		#endregion
		
		#region Clone

		public $it.Name$ Clone()
		{
			return ($it.Name$) ((ICloneable) this).Clone();
		}

		object ICloneable.Clone()
		{
			return new $it.Name$(($it.Name$) this);
		}

		#endregion
	}

$if(it.Package)$
}
$endif$
