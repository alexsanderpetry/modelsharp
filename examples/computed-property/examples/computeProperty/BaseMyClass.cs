// Automatically generated by Model#
// DO NOT EDIT THIS FILE

using org.pescuma.ModelSharp.Lib;
using System.Collections.Specialized;
using System;
using System.ComponentModel;
using System.Runtime.Serialization;
using System.Diagnostics;

namespace examples.computeProperty
{

	[DataContract]
	[DebuggerDisplay("MyClass[X={X} Y={Y} Children={Children.Count}items Ps={Ps.Count}items P={P}]")]
	public abstract class BaseMyClass : INotifyPropertyChanging, INotifyChildPropertyChanging, INotifyPropertyChanged, INotifyChildPropertyChanged, IDeserializationCallback, ICloneable, ICopyable
	{
		#region Field Name Defines
		
		public class PROPERTIES
		{
			public static readonly string X = ModelUtils.NameOfProperty((BaseMyClass o) => o.X);
			public static readonly string Y = ModelUtils.NameOfProperty((BaseMyClass o) => o.Y);
			public static readonly string LENGTH = ModelUtils.NameOfProperty((BaseMyClass o) => o.Length);
			public static readonly string DUMMY = ModelUtils.NameOfProperty((BaseMyClass o) => o.Dummy);
			public static readonly string DUMMY_CACHED = ModelUtils.NameOfProperty((BaseMyClass o) => o.DummyCached);
			public static readonly string SQUARED_LENGTH = ModelUtils.NameOfProperty((BaseMyClass o) => o.SquaredLength);
			public static readonly string SQUARED_LENGTH_CACHED = ModelUtils.NameOfProperty((BaseMyClass o) => o.SquaredLengthCached);
			public static readonly string CHILDREN = ModelUtils.NameOfProperty((BaseMyClass o) => o.Children);
			public static readonly string PS = ModelUtils.NameOfProperty((BaseMyClass o) => o.Ps);
			public static readonly string P = ModelUtils.NameOfProperty((BaseMyClass o) => o.P);
			public static readonly string COMP_SUB = ModelUtils.NameOfProperty((BaseMyClass o) => o.CompSub);
			public static readonly string COMP_SUB_CACHED = ModelUtils.NameOfProperty((BaseMyClass o) => o.CompSubCached);
			
			protected PROPERTIES() {}
		}
		
		#endregion
		
		#region Constructors
		
		protected BaseMyClass()
		{
			this.y = 2;
			this.children = new ObservableList<MyClass>();
			AddChildrenListListeners(this.children);
			this.ps = new ObservableList<Point>();
			AddPsListListeners(this.ps);
			AddPListeners(this.p);
		}
		
		protected BaseMyClass(BaseMyClass other)
		{
			this.x = other.X;
			this.y = other.Y;
			this.children = new ObservableList<MyClass>();
			AddChildrenListListeners(this.children);
			this.children.AddRange(other.Children);
			this.ps = new ObservableList<Point>();
			AddPsListListeners(this.ps);
			this.ps.AddRange(other.Ps);
			this.p = other.P;
			AddPListeners(this.p);
		}
		
		#endregion Constructors
		
		#region Property X
		
		[DataMember(Name = "X", Order = 0, IsRequired = false)]
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private double x;
		
		public double X
		{
			[DebuggerStepThrough]
			get {
				return GetX();
			}
			[DebuggerStepThrough]
			set {
				SetX(value);
			}
		}
		
		[DebuggerStepThrough]
		protected virtual double GetX()
		{
			return this.x;
		}
		
		[DebuggerStepThrough]
		protected virtual bool SetX(double x)
		{
			if (this.x == x)
				return false;
				
			NotifyPropertyChanging(PROPERTIES.X);
			
			this.x = x;
			
			NotifyPropertyChanged(PROPERTIES.X);
			
			return true;
		}
		
		#endregion Property X
		
		#region Property Y
		
		[DataMember(Name = "Y", Order = 1, IsRequired = false)]
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private double y;
		
		public double Y
		{
			[DebuggerStepThrough]
			get {
				return GetY();
			}
			[DebuggerStepThrough]
			set {
				SetY(value);
			}
		}
		
		[DebuggerStepThrough]
		protected virtual double GetY()
		{
			return this.y;
		}
		
		[DebuggerStepThrough]
		protected virtual bool SetY(double y)
		{
			if (this.y == y)
				return false;
				
			NotifyPropertyChanging(PROPERTIES.Y);
			
			this.y = y;
			
			NotifyPropertyChanged(PROPERTIES.Y);
			
			return true;
		}
		
		#endregion Property Y
		
		#region Property Length
		
		public double Length
		{
			[DebuggerStepThrough]
			get {
				return ComputeLength();
			}
		}
		
		[DebuggerStepThrough]
		protected virtual double ComputeLength()
		{
			return Math.Sqrt(X * X + Y * Y);
		}
		
		#endregion Property Length
		
		#region Property Dummy
		
		public string Dummy
		{
			[DebuggerStepThrough]
			get {
				return ComputeDummy();
			}
		}
		
		[DebuggerStepThrough]
		protected abstract string ComputeDummy();
		
		#endregion Property Dummy
		
		#region Property DummyCached
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string dummyCachedCache;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool dummyCachedCacheValid;
		
		public string DummyCached
		{
			[DebuggerStepThrough]
			get {
				return ComputeAndCacheDummyCached();
			}
		}
		
		/// Do not call this method directly. Instead, call NotifyPropertyChanged(() => DummyCached)
		private void InvalidateDummyCachedCache()
		{
			dummyCachedCacheValid = false;
		}
		
		private string ComputeAndCacheDummyCached()
		{
			if (!dummyCachedCacheValid)
			{
				this.dummyCachedCache = ComputeDummyCached();
				this.dummyCachedCacheValid = true;
			}
			
			return this.dummyCachedCache;
		}
		
		[DebuggerStepThrough]
		protected abstract string ComputeDummyCached();
		
		#endregion Property DummyCached
		
		#region Property SquaredLength
		
		public double SquaredLength
		{
			[DebuggerStepThrough]
			get {
				return ComputeSquaredLength();
			}
		}
		
		[DebuggerStepThrough]
		protected abstract double ComputeSquaredLength();
		
		#endregion Property SquaredLength
		
		#region Property SquaredLengthCached
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private double squaredLengthCachedCache;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool squaredLengthCachedCacheValid;
		
		public double SquaredLengthCached
		{
			[DebuggerStepThrough]
			get {
				return ComputeAndCacheSquaredLengthCached();
			}
		}
		
		/// Do not call this method directly. Instead, call NotifyPropertyChanged(() => SquaredLengthCached)
		private void InvalidateSquaredLengthCachedCache()
		{
			squaredLengthCachedCacheValid = false;
		}
		
		private double ComputeAndCacheSquaredLengthCached()
		{
			if (!squaredLengthCachedCacheValid)
			{
				this.squaredLengthCachedCache = ComputeSquaredLengthCached();
				this.squaredLengthCachedCacheValid = true;
			}
			
			return this.squaredLengthCachedCache;
		}
		
		[DebuggerStepThrough]
		protected abstract double ComputeSquaredLengthCached();
		
		#endregion Property SquaredLengthCached
		
		#region Property Children
		
		[DataMember(Name = "Children", Order = 2, IsRequired = false)]
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ObservableList<MyClass> children;
		
		public ObservableList<MyClass> Children
		{
			[DebuggerStepThrough]
			get {
				return GetChildren();
			}
		}
		
		[DebuggerStepThrough]
		protected virtual ObservableList<MyClass> GetChildren()
		{
			return this.children;
		}
		
		private void AddChildrenListListeners(ObservableList<MyClass> child)
		{
			if (child == null)
				return;
				
			var notifyPropertyChanging = child as INotifyPropertyChanging;
// ReSharper disable ConditionIsAlwaysTrueOrFalse
			if (notifyPropertyChanging != null)
// ReSharper restore ConditionIsAlwaysTrueOrFalse
				notifyPropertyChanging.PropertyChanging += ChildrenListPropertyChangingEventHandler;
				
			var notifyPropertyChanged = child as INotifyPropertyChanged;
// ReSharper disable ConditionIsAlwaysTrueOrFalse
			if (notifyPropertyChanged != null)
// ReSharper restore ConditionIsAlwaysTrueOrFalse
				notifyPropertyChanged.PropertyChanged += ChildrenListPropertyChangedEventHandler;
				
			var notifyChildPropertyChanged = child as INotifyCollectionChanged;
// ReSharper disable ConditionIsAlwaysTrueOrFalse
			if (notifyChildPropertyChanged != null)
// ReSharper restore ConditionIsAlwaysTrueOrFalse
				notifyChildPropertyChanged.CollectionChanged += ChildrenListChangedEventHandler;
				
			foreach (var item in child)
				AddChildrenItemListeners(item);
		}
		
		private void ChildrenListPropertyChangingEventHandler(object sender, PropertyChangingEventArgs e)
		{
			if (e.PropertyName != ObservableList<MyClass>.PROPERTIES.ITEMS)
				return;
				
			NotifyPropertyChanging(PROPERTIES.CHILDREN);
		}
		
		private void ChildrenListPropertyChangedEventHandler(object sender, PropertyChangedEventArgs e)
		{
			if (e.PropertyName != ObservableList<MyClass>.PROPERTIES.ITEMS)
				return;
				
			NotifyPropertyChanged(PROPERTIES.CHILDREN);
		}
		
		private void ChildrenListChangedEventHandler(object sender, NotifyCollectionChangedEventArgs e)
		{
			switch (e.Action)
			{
				case NotifyCollectionChangedAction.Add:
				case NotifyCollectionChangedAction.Remove:
				case NotifyCollectionChangedAction.Replace:
				
					if ((e.OldItems == null || e.OldItems.Count == 0)
					        && (e.NewItems == null || e.NewItems.Count == 0))
						throw new InvalidOperationException();
						
					if (e.OldItems != null)
						foreach (var item in e.OldItems)
							RemoveChildrenItemListeners(item);
							
					if (e.NewItems != null)
						foreach (var item in e.NewItems)
							AddChildrenItemListeners(item);
							
					break;
				case NotifyCollectionChangedAction.Move:
					// Do nothing
					break;
				default:
					// NotifyCollectionChangedAction.Reset: The list should not fire this or
					// we can't control the items
					throw new InvalidOperationException();
			}
		}
		
		private void RemoveChildrenItemListeners(object child)
		{
			if (child == null)
				return;
				
			var notifyPropertyChanging = child as INotifyPropertyChanging;
// ReSharper disable ConditionIsAlwaysTrueOrFalse
			if (notifyPropertyChanging != null)
// ReSharper restore ConditionIsAlwaysTrueOrFalse
				notifyPropertyChanging.PropertyChanging -= ChildrenItemPropertyChangingEventHandler;
				
			var notifyChildPropertyChanging = child as INotifyChildPropertyChanging;
// ReSharper disable ConditionIsAlwaysTrueOrFalse
			if (notifyChildPropertyChanging != null)
// ReSharper restore ConditionIsAlwaysTrueOrFalse
				notifyChildPropertyChanging.ChildPropertyChanging -= ChildrenItemChildPropertyChangingEventHandler;
				
			var notifyPropertyChanged = child as INotifyPropertyChanged;
// ReSharper disable ConditionIsAlwaysTrueOrFalse
			if (notifyPropertyChanged != null)
// ReSharper restore ConditionIsAlwaysTrueOrFalse
				notifyPropertyChanged.PropertyChanged -= ChildrenItemPropertyChangedEventHandler;
				
			var notifyChildPropertyChanged = child as INotifyChildPropertyChanged;
// ReSharper disable ConditionIsAlwaysTrueOrFalse
			if (notifyChildPropertyChanged != null)
// ReSharper restore ConditionIsAlwaysTrueOrFalse
				notifyChildPropertyChanged.ChildPropertyChanged -= ChildrenItemChildPropertyChangedEventHandler;
		}
		
		private void AddChildrenItemListeners(object child)
		{
			if (child == null)
				return;
				
			var notifyPropertyChanging = child as INotifyPropertyChanging;
// ReSharper disable ConditionIsAlwaysTrueOrFalse
			if (notifyPropertyChanging != null)
// ReSharper restore ConditionIsAlwaysTrueOrFalse
				notifyPropertyChanging.PropertyChanging += ChildrenItemPropertyChangingEventHandler;
				
			var notifyChildPropertyChanging = child as INotifyChildPropertyChanging;
// ReSharper disable ConditionIsAlwaysTrueOrFalse
			if (notifyChildPropertyChanging != null)
// ReSharper restore ConditionIsAlwaysTrueOrFalse
				notifyChildPropertyChanging.ChildPropertyChanging += ChildrenItemChildPropertyChangingEventHandler;
				
			var notifyPropertyChanged = child as INotifyPropertyChanged;
// ReSharper disable ConditionIsAlwaysTrueOrFalse
			if (notifyPropertyChanged != null)
// ReSharper restore ConditionIsAlwaysTrueOrFalse
				notifyPropertyChanged.PropertyChanged += ChildrenItemPropertyChangedEventHandler;
				
			var notifyChildPropertyChanged = child as INotifyChildPropertyChanged;
// ReSharper disable ConditionIsAlwaysTrueOrFalse
			if (notifyChildPropertyChanged != null)
// ReSharper restore ConditionIsAlwaysTrueOrFalse
				notifyChildPropertyChanged.ChildPropertyChanged += ChildrenItemChildPropertyChangedEventHandler;
		}
		
		private void ChildrenItemPropertyChangingEventHandler(object sender, PropertyChangingEventArgs e)
		{
			NotifyChildPropertyChanging(PROPERTIES.CHILDREN, sender, e);
		}
		
		private void ChildrenItemChildPropertyChangingEventHandler(object sender, ChildPropertyChangingEventArgs e)
		{
			NotifyChildPropertyChanging(PROPERTIES.CHILDREN, sender, e);
		}
		
		private void ChildrenItemPropertyChangedEventHandler(object sender, PropertyChangedEventArgs e)
		{
			NotifyChildPropertyChanged(PROPERTIES.CHILDREN, sender, e);
		}
		
		private void ChildrenItemChildPropertyChangedEventHandler(object sender, ChildPropertyChangedEventArgs e)
		{
			NotifyChildPropertyChanged(PROPERTIES.CHILDREN, sender, e);
		}
		
		#endregion Property Children
		
		#region Property Ps
		
		[DataMember(Name = "Ps", Order = 3, IsRequired = false)]
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ObservableList<Point> ps;
		
		public ObservableList<Point> Ps
		{
			[DebuggerStepThrough]
			get {
				return GetPs();
			}
		}
		
		[DebuggerStepThrough]
		protected virtual ObservableList<Point> GetPs()
		{
			return this.ps;
		}
		
		private void AddPsListListeners(ObservableList<Point> child)
		{
			if (child == null)
				return;
				
			var notifyPropertyChanging = child as INotifyPropertyChanging;
// ReSharper disable ConditionIsAlwaysTrueOrFalse
			if (notifyPropertyChanging != null)
// ReSharper restore ConditionIsAlwaysTrueOrFalse
				notifyPropertyChanging.PropertyChanging += PsListPropertyChangingEventHandler;
				
			var notifyPropertyChanged = child as INotifyPropertyChanged;
// ReSharper disable ConditionIsAlwaysTrueOrFalse
			if (notifyPropertyChanged != null)
// ReSharper restore ConditionIsAlwaysTrueOrFalse
				notifyPropertyChanged.PropertyChanged += PsListPropertyChangedEventHandler;
				
			var notifyChildPropertyChanged = child as INotifyCollectionChanged;
// ReSharper disable ConditionIsAlwaysTrueOrFalse
			if (notifyChildPropertyChanged != null)
// ReSharper restore ConditionIsAlwaysTrueOrFalse
				notifyChildPropertyChanged.CollectionChanged += PsListChangedEventHandler;
				
			foreach (var item in child)
				AddPsItemListeners(item);
		}
		
		private void PsListPropertyChangingEventHandler(object sender, PropertyChangingEventArgs e)
		{
			if (e.PropertyName != ObservableList<Point>.PROPERTIES.ITEMS)
				return;
				
			NotifyPropertyChanging(PROPERTIES.PS);
		}
		
		private void PsListPropertyChangedEventHandler(object sender, PropertyChangedEventArgs e)
		{
			if (e.PropertyName != ObservableList<Point>.PROPERTIES.ITEMS)
				return;
				
			NotifyPropertyChanged(PROPERTIES.PS);
		}
		
		private void PsListChangedEventHandler(object sender, NotifyCollectionChangedEventArgs e)
		{
			switch (e.Action)
			{
				case NotifyCollectionChangedAction.Add:
				case NotifyCollectionChangedAction.Remove:
				case NotifyCollectionChangedAction.Replace:
				
					if ((e.OldItems == null || e.OldItems.Count == 0)
					        && (e.NewItems == null || e.NewItems.Count == 0))
						throw new InvalidOperationException();
						
					if (e.OldItems != null)
						foreach (var item in e.OldItems)
							RemovePsItemListeners(item);
							
					if (e.NewItems != null)
						foreach (var item in e.NewItems)
							AddPsItemListeners(item);
							
					break;
				case NotifyCollectionChangedAction.Move:
					// Do nothing
					break;
				default:
					// NotifyCollectionChangedAction.Reset: The list should not fire this or
					// we can't control the items
					throw new InvalidOperationException();
			}
		}
		
		private void RemovePsItemListeners(object child)
		{
			if (child == null)
				return;
				
			var notifyPropertyChanging = child as INotifyPropertyChanging;
// ReSharper disable ConditionIsAlwaysTrueOrFalse
			if (notifyPropertyChanging != null)
// ReSharper restore ConditionIsAlwaysTrueOrFalse
				notifyPropertyChanging.PropertyChanging -= PsItemPropertyChangingEventHandler;
				
			var notifyChildPropertyChanging = child as INotifyChildPropertyChanging;
// ReSharper disable ConditionIsAlwaysTrueOrFalse
			if (notifyChildPropertyChanging != null)
// ReSharper restore ConditionIsAlwaysTrueOrFalse
				notifyChildPropertyChanging.ChildPropertyChanging -= PsItemChildPropertyChangingEventHandler;
				
			var notifyPropertyChanged = child as INotifyPropertyChanged;
// ReSharper disable ConditionIsAlwaysTrueOrFalse
			if (notifyPropertyChanged != null)
// ReSharper restore ConditionIsAlwaysTrueOrFalse
				notifyPropertyChanged.PropertyChanged -= PsItemPropertyChangedEventHandler;
				
			var notifyChildPropertyChanged = child as INotifyChildPropertyChanged;
// ReSharper disable ConditionIsAlwaysTrueOrFalse
			if (notifyChildPropertyChanged != null)
// ReSharper restore ConditionIsAlwaysTrueOrFalse
				notifyChildPropertyChanged.ChildPropertyChanged -= PsItemChildPropertyChangedEventHandler;
		}
		
		private void AddPsItemListeners(object child)
		{
			if (child == null)
				return;
				
			var notifyPropertyChanging = child as INotifyPropertyChanging;
// ReSharper disable ConditionIsAlwaysTrueOrFalse
			if (notifyPropertyChanging != null)
// ReSharper restore ConditionIsAlwaysTrueOrFalse
				notifyPropertyChanging.PropertyChanging += PsItemPropertyChangingEventHandler;
				
			var notifyChildPropertyChanging = child as INotifyChildPropertyChanging;
// ReSharper disable ConditionIsAlwaysTrueOrFalse
			if (notifyChildPropertyChanging != null)
// ReSharper restore ConditionIsAlwaysTrueOrFalse
				notifyChildPropertyChanging.ChildPropertyChanging += PsItemChildPropertyChangingEventHandler;
				
			var notifyPropertyChanged = child as INotifyPropertyChanged;
// ReSharper disable ConditionIsAlwaysTrueOrFalse
			if (notifyPropertyChanged != null)
// ReSharper restore ConditionIsAlwaysTrueOrFalse
				notifyPropertyChanged.PropertyChanged += PsItemPropertyChangedEventHandler;
				
			var notifyChildPropertyChanged = child as INotifyChildPropertyChanged;
// ReSharper disable ConditionIsAlwaysTrueOrFalse
			if (notifyChildPropertyChanged != null)
// ReSharper restore ConditionIsAlwaysTrueOrFalse
				notifyChildPropertyChanged.ChildPropertyChanged += PsItemChildPropertyChangedEventHandler;
		}
		
		private void PsItemPropertyChangingEventHandler(object sender, PropertyChangingEventArgs e)
		{
			NotifyChildPropertyChanging(PROPERTIES.PS, sender, e);
		}
		
		private void PsItemChildPropertyChangingEventHandler(object sender, ChildPropertyChangingEventArgs e)
		{
			NotifyChildPropertyChanging(PROPERTIES.PS, sender, e);
		}
		
		private void PsItemPropertyChangedEventHandler(object sender, PropertyChangedEventArgs e)
		{
			NotifyChildPropertyChanged(PROPERTIES.PS, sender, e);
		}
		
		private void PsItemChildPropertyChangedEventHandler(object sender, ChildPropertyChangedEventArgs e)
		{
			NotifyChildPropertyChanged(PROPERTIES.PS, sender, e);
		}
		
		#endregion Property Ps
		
		#region Property P
		
		[DataMember(Name = "P", Order = 4, IsRequired = false)]
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Point p;
		
		public Point P
		{
			[DebuggerStepThrough]
			get {
				return GetP();
			}
			[DebuggerStepThrough]
			set {
				SetP(value);
			}
		}
		
		[DebuggerStepThrough]
		protected virtual Point GetP()
		{
			return this.p;
		}
		
		[DebuggerStepThrough]
		protected virtual bool SetP(Point p)
		{
			if (this.p == p)
				return false;
				
			NotifyPropertyChanging(PROPERTIES.P);
			
			RemovePListeners(p);
			
			this.p = p;
			
			AddPListeners(p);
			
			NotifyPropertyChanged(PROPERTIES.P);
			
			return true;
		}
		
		private void RemovePListeners(object child)
		{
			if (child == null)
				return;
				
			var notifyPropertyChanging = child as INotifyPropertyChanging;
			if (notifyPropertyChanging != null)
				notifyPropertyChanging.PropertyChanging -= PPropertyChangingEventHandler;
				
			var notifyChildPropertyChanging = child as INotifyChildPropertyChanging;
			if (notifyChildPropertyChanging != null)
				notifyChildPropertyChanging.ChildPropertyChanging -= PChildPropertyChangingEventHandler;
				
			var notifyPropertyChanged = child as INotifyPropertyChanged;
			if (notifyPropertyChanged != null)
				notifyPropertyChanged.PropertyChanged -= PPropertyChangedEventHandler;
				
			var notifyChildPropertyChanged = child as INotifyChildPropertyChanged;
			if (notifyChildPropertyChanged != null)
				notifyChildPropertyChanged.ChildPropertyChanged -= PChildPropertyChangedEventHandler;
		}
		
		private void AddPListeners(object child)
		{
			if (child == null)
				return;
				
			var notifyPropertyChanging = child as INotifyPropertyChanging;
			if (notifyPropertyChanging != null)
				notifyPropertyChanging.PropertyChanging += PPropertyChangingEventHandler;
				
			var notifyChildPropertyChanging = child as INotifyChildPropertyChanging;
			if (notifyChildPropertyChanging != null)
				notifyChildPropertyChanging.ChildPropertyChanging += PChildPropertyChangingEventHandler;
				
			var notifyPropertyChanged = child as INotifyPropertyChanged;
			if (notifyPropertyChanged != null)
				notifyPropertyChanged.PropertyChanged += PPropertyChangedEventHandler;
				
			var notifyChildPropertyChanged = child as INotifyChildPropertyChanged;
			if (notifyChildPropertyChanged != null)
				notifyChildPropertyChanged.ChildPropertyChanged += PChildPropertyChangedEventHandler;
		}
		
		private void PPropertyChangingEventHandler(object sender, PropertyChangingEventArgs e)
		{
			NotifyChildPropertyChanging(PROPERTIES.P, sender, e);
		}
		
		private void PChildPropertyChangingEventHandler(object sender, ChildPropertyChangingEventArgs e)
		{
			NotifyChildPropertyChanging(PROPERTIES.P, sender, e);
		}
		
		private void PPropertyChangedEventHandler(object sender, PropertyChangedEventArgs e)
		{
			NotifyChildPropertyChanged(PROPERTIES.P, sender, e);
		}
		
		private void PChildPropertyChangedEventHandler(object sender, ChildPropertyChangedEventArgs e)
		{
			NotifyChildPropertyChanged(PROPERTIES.P, sender, e);
		}
		
		#endregion Property P
		
		#region Property CompSub
		
		public double CompSub
		{
			[DebuggerStepThrough]
			get {
				return ComputeCompSub();
			}
		}
		
		[DebuggerStepThrough]
		protected abstract double ComputeCompSub();
		
		#endregion Property CompSub
		
		#region Property CompSubCached
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private double compSubCachedCache;
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool compSubCachedCacheValid;
		
		public double CompSubCached
		{
			[DebuggerStepThrough]
			get {
				return ComputeAndCacheCompSubCached();
			}
		}
		
		/// Do not call this method directly. Instead, call NotifyPropertyChanged(() => CompSubCached)
		private void InvalidateCompSubCachedCache()
		{
			compSubCachedCacheValid = false;
		}
		
		private double ComputeAndCacheCompSubCached()
		{
			if (!compSubCachedCacheValid)
			{
				this.compSubCachedCache = ComputeCompSubCached();
				this.compSubCachedCacheValid = true;
			}
			
			return this.compSubCachedCache;
		}
		
		[DebuggerStepThrough]
		protected abstract double ComputeCompSubCached();
		
		#endregion Property CompSubCached
		
		#region Property Notification
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		protected virtual void NotifyPropertyChanging(string propertyName)
		{
			PropertyChangingEventHandler handler = PropertyChanging;
			if (handler != null)
				handler(this, new PropertyChangingEventArgs(propertyName));
				
			if (propertyName == PROPERTIES.X)
			{
				NotifyPropertyChanging(PROPERTIES.LENGTH);
				NotifyPropertyChanging(PROPERTIES.SQUARED_LENGTH);
				NotifyPropertyChanging(PROPERTIES.SQUARED_LENGTH_CACHED);
			}
			else if (propertyName == PROPERTIES.Y)
			{
				NotifyPropertyChanging(PROPERTIES.LENGTH);
				NotifyPropertyChanging(PROPERTIES.SQUARED_LENGTH);
				NotifyPropertyChanging(PROPERTIES.SQUARED_LENGTH_CACHED);
			}
			else if (propertyName == PROPERTIES.CHILDREN)
			{
				NotifyPropertyChanging(PROPERTIES.SQUARED_LENGTH);
			}
			else if (propertyName == PROPERTIES.PS)
			{
				NotifyPropertyChanging(PROPERTIES.SQUARED_LENGTH_CACHED);
				NotifyPropertyChanging(PROPERTIES.COMP_SUB);
				NotifyPropertyChanging(PROPERTIES.COMP_SUB_CACHED);
			}
			else if (propertyName == PROPERTIES.P)
			{
				NotifyPropertyChanging(PROPERTIES.COMP_SUB);
				NotifyPropertyChanging(PROPERTIES.COMP_SUB_CACHED);
			}
		}
		
		public event ChildPropertyChangingEventHandler ChildPropertyChanging;
		
		protected virtual void NotifyChildPropertyChanging(string propertyName, object sender, PropertyChangingEventArgs e)
		{
			ChildPropertyChangingEventHandler handler = ChildPropertyChanging;
			if (handler != null)
				handler(sender, new ChildPropertyChangingEventArgs(this, propertyName, sender, e));
				
			if (propertyName == PROPERTIES.X)
			{
				NotifyPropertyChanging(PROPERTIES.LENGTH);
				NotifyPropertyChanging(PROPERTIES.SQUARED_LENGTH);
				NotifyPropertyChanging(PROPERTIES.SQUARED_LENGTH_CACHED);
			}
			else if (propertyName == PROPERTIES.Y)
			{
				NotifyPropertyChanging(PROPERTIES.LENGTH);
				NotifyPropertyChanging(PROPERTIES.SQUARED_LENGTH);
				NotifyPropertyChanging(PROPERTIES.SQUARED_LENGTH_CACHED);
			}
			else if (propertyName == PROPERTIES.CHILDREN)
			{
				NotifyPropertyChanging(PROPERTIES.SQUARED_LENGTH);
			}
			else if (propertyName == PROPERTIES.PS)
			{
				NotifyPropertyChanging(PROPERTIES.SQUARED_LENGTH_CACHED);
				
				string path = (e is ChildPropertyChangingEventArgs ? ((ChildPropertyChangingEventArgs) e).FullPath : e.PropertyName);
				if (path == ModelUtils.NameOfProperty((Point p) => p.Y))
				{
					NotifyPropertyChanging(PROPERTIES.COMP_SUB);
					NotifyPropertyChanging(PROPERTIES.COMP_SUB_CACHED);
				}
			}
			else if (propertyName == PROPERTIES.P)
			{
				string path = (e is ChildPropertyChangingEventArgs ? ((ChildPropertyChangingEventArgs) e).FullPath : e.PropertyName);
				if (path == ModelUtils.NameOfProperty((Point p) => p.X))
				{
					NotifyPropertyChanging(PROPERTIES.COMP_SUB);
					NotifyPropertyChanging(PROPERTIES.COMP_SUB_CACHED);
				}
				else if (path == ModelUtils.NameOfProperty((Point p) => p.Y))
				{
					NotifyPropertyChanging(PROPERTIES.COMP_SUB);
					NotifyPropertyChanging(PROPERTIES.COMP_SUB_CACHED);
				}
			}
		}
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void NotifyPropertyChanged(string propertyName)
		{
			if (propertyName == PROPERTIES.X)
			{
				InvalidateSquaredLengthCachedCache();
			}
			else if (propertyName == PROPERTIES.Y)
			{
				InvalidateSquaredLengthCachedCache();
			}
			else if (propertyName == PROPERTIES.PS)
			{
				InvalidateSquaredLengthCachedCache();
				InvalidateCompSubCachedCache();
			}
			else if (propertyName == PROPERTIES.P)
			{
				InvalidateCompSubCachedCache();
			}
			if (propertyName == PROPERTIES.DUMMY_CACHED)
			{
				InvalidateDummyCachedCache();
			}
			else if (propertyName == PROPERTIES.SQUARED_LENGTH_CACHED)
			{
				InvalidateSquaredLengthCachedCache();
			}
			else if (propertyName == PROPERTIES.COMP_SUB_CACHED)
			{
				InvalidateCompSubCachedCache();
			}
			
			PropertyChangedEventHandler handler = PropertyChanged;
			if (handler != null)
				handler(this, new PropertyChangedEventArgs(propertyName));
				
			if (propertyName == PROPERTIES.X)
			{
				NotifyPropertyChanged(PROPERTIES.LENGTH);
				NotifyPropertyChanged(PROPERTIES.SQUARED_LENGTH);
				NotifyPropertyChanged(PROPERTIES.SQUARED_LENGTH_CACHED);
			}
			else if (propertyName == PROPERTIES.Y)
			{
				NotifyPropertyChanged(PROPERTIES.LENGTH);
				NotifyPropertyChanged(PROPERTIES.SQUARED_LENGTH);
				NotifyPropertyChanged(PROPERTIES.SQUARED_LENGTH_CACHED);
			}
			else if (propertyName == PROPERTIES.CHILDREN)
			{
				NotifyPropertyChanged(PROPERTIES.SQUARED_LENGTH);
			}
			else if (propertyName == PROPERTIES.PS)
			{
				NotifyPropertyChanged(PROPERTIES.SQUARED_LENGTH_CACHED);
				NotifyPropertyChanged(PROPERTIES.COMP_SUB);
				NotifyPropertyChanged(PROPERTIES.COMP_SUB_CACHED);
			}
			else if (propertyName == PROPERTIES.P)
			{
				NotifyPropertyChanged(PROPERTIES.COMP_SUB);
				NotifyPropertyChanged(PROPERTIES.COMP_SUB_CACHED);
			}
		}
		
		public event ChildPropertyChangedEventHandler ChildPropertyChanged;
		
		protected virtual void NotifyChildPropertyChanged(string propertyName, object sender, PropertyChangedEventArgs e)
		{
			if (propertyName == PROPERTIES.X)
			{
				InvalidateSquaredLengthCachedCache();
			}
			else if (propertyName == PROPERTIES.Y)
			{
				InvalidateSquaredLengthCachedCache();
			}
			else if (propertyName == PROPERTIES.PS)
			{
				InvalidateSquaredLengthCachedCache();
				string path = (e is ChildPropertyChangedEventArgs ? ((ChildPropertyChangedEventArgs) e).FullPath : e.PropertyName);
				if (path == "Y")
				{
					InvalidateCompSubCachedCache();
				}
			}
			else if (propertyName == PROPERTIES.P)
			{
				string path = (e is ChildPropertyChangedEventArgs ? ((ChildPropertyChangedEventArgs) e).FullPath : e.PropertyName);
				if (path == "X")
				{
					InvalidateCompSubCachedCache();
				}
				else if (path == "Y")
				{
					InvalidateCompSubCachedCache();
				}
			}
			
			ChildPropertyChangedEventHandler handler = ChildPropertyChanged;
			if (handler != null)
				handler(sender, new ChildPropertyChangedEventArgs(this, propertyName, sender, e));
				
			if (propertyName == PROPERTIES.X)
			{
				NotifyPropertyChanged(PROPERTIES.LENGTH);
				NotifyPropertyChanged(PROPERTIES.SQUARED_LENGTH);
				NotifyPropertyChanged(PROPERTIES.SQUARED_LENGTH_CACHED);
			}
			else if (propertyName == PROPERTIES.Y)
			{
				NotifyPropertyChanged(PROPERTIES.LENGTH);
				NotifyPropertyChanged(PROPERTIES.SQUARED_LENGTH);
				NotifyPropertyChanged(PROPERTIES.SQUARED_LENGTH_CACHED);
			}
			else if (propertyName == PROPERTIES.CHILDREN)
			{
				NotifyPropertyChanged(PROPERTIES.SQUARED_LENGTH);
			}
			else if (propertyName == PROPERTIES.PS)
			{
				NotifyPropertyChanged(PROPERTIES.SQUARED_LENGTH_CACHED);
				
				string path = (e is ChildPropertyChangedEventArgs ? ((ChildPropertyChangedEventArgs) e).FullPath : e.PropertyName);
				if (path == ModelUtils.NameOfProperty((Point p) => p.Y))
				{
					NotifyPropertyChanged(PROPERTIES.COMP_SUB);
					NotifyPropertyChanged(PROPERTIES.COMP_SUB_CACHED);
				}
			}
			else if (propertyName == PROPERTIES.P)
			{
				string path = (e is ChildPropertyChangedEventArgs ? ((ChildPropertyChangedEventArgs) e).FullPath : e.PropertyName);
				if (path == ModelUtils.NameOfProperty((Point p) => p.X))
				{
					NotifyPropertyChanged(PROPERTIES.COMP_SUB);
					NotifyPropertyChanged(PROPERTIES.COMP_SUB_CACHED);
				}
				else if (path == ModelUtils.NameOfProperty((Point p) => p.Y))
				{
					NotifyPropertyChanged(PROPERTIES.COMP_SUB);
					NotifyPropertyChanged(PROPERTIES.COMP_SUB_CACHED);
				}
			}
		}
		
		#endregion Property Notification
		
		#region CopyFrom
		
		void ICopyable.CopyFrom(object other)
		{
			CopyFrom((MyClass) other);
		}
		
		public virtual void CopyFrom(MyClass other)
		{
			X = other.X;
			Y = other.Y;
			Children.Clear();
			Children.AddRange(other.Children);
			Ps.Clear();
			Ps.AddRange(other.Ps);
			P = other.P;
		}
		
		#endregion CopyFrom
		
		#region Clone
		
#pragma warning disable 109
		public new MyClass Clone()
#pragma warning restore 109
		{
			return (MyClass) ((ICloneable) this).Clone();
		}
		
		object ICloneable.Clone()
		{
			return new MyClass((MyClass) this);
		}
		
		#endregion Clone
		
		#region Serialization
		
		void IDeserializationCallback.OnDeserialization(object sender)
		{
			AddChildrenListListeners(this.children);
			AddPsListListeners(this.ps);
			AddPListeners(this.p);
		}
		
		#endregion Serialization
	}
	
}
