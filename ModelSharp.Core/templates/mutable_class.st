// Automatically generated by Model#
// DO NOT EDIT THIS FILE

$it.Using:create_using()$

namespace $it.Package$
{
	$it.Annotations:annotation()$
	public abstract class $it.ImplementationName$ $if(it.Implements)$ : $it.Implements; separator=", "$ $endif$
	{
		#region Field Name Defines
		public class PROPERTIES
		{
			$it.Properties:define()$
		}
		#endregion

		public $it.ImplementationName$()
		{
			$it.Properties:mutable_init_field()$
		}

		public $it.ImplementationName$($it.ImplementationName$ other)
		{
			$it.Properties:mutable_other_to_field()$
		}

		$it.Properties:property()$

		#region Get/Set by name
		
		public object GetField(string fieldName)
		{
			switch (fieldName)
			{
				$it.Properties:switch_getter()$
			}

			throw new ArgumentException("No gettable field named " + fieldName);
		}

		public void SetField(string fieldName, object value)
		{
$if(it.HasSettableProperties)$
			switch (fieldName)
			{
				$it.Properties:switch_setter()$
			}
$endif$

			throw new ArgumentException("No settable field named " + fieldName);
		}

		#endregion

		#region Property Notification

		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;

$if(it.HasSettableProperties)$
		protected void OnPropertyChanging(string propertyName)
		{
			PropertyChangingEventHandler handler = PropertyChanging;
			if (handler != null)
				handler(this, new PropertyChangingEventArgs(propertyName));
		}

		protected void OnPropertyChanged(string propertyName)
		{
			PropertyChangedEventHandler handler = PropertyChanged;
			if (handler != null)
				handler(this, new PropertyChangedEventArgs(propertyName));
		}
$endif$

		#endregion Property Notification

		public new $it.Name$ Clone()
		{
			return ($it.Name$) ((ICloneable) this).Clone();
		}

		object ICloneable.Clone()
		{
			return new $it.Name$(($it.Name$) this);
		}
	}
}