//----------------------
// <auto-generated>
//     Automatically generated by Model#
// </auto-generated>
//----------------------
// DO NOT EDIT THIS FILE

using System.CodeDom.Compiler;
using System.Runtime.Serialization;
using System.Diagnostics;
using System;

namespace examples.equals
{

	[DataContract]
	[DebuggerDisplay("PointImmutable[X={X} Y={Y} A={A}]")]
	[GeneratedCode("Model#", "0.2.0.0")]
	public abstract class BasePointImmutable : ICloneable
	{
		[DataMember(Name = "X", Order = 0, IsRequired = false)]
		public readonly double? X;
		
		[DataMember(Name = "Y", Order = 1, IsRequired = false)]
		public readonly double Y;
		
		[DataMember(Name = "A", Order = 2, IsRequired = false)]
		public readonly PointImmutable A;
		
		protected BasePointImmutable(double? x, double y, PointImmutable a)
		{
			X = x;
			Y = y;
			A = a;
		}
		
		protected BasePointImmutable(BasePointImmutable other)
		{
			this.X = other.X;
			this.Y = other.Y;
			this.A = other.A;
		}
		
		public virtual PointImmutable WithX(double? x)
		{
			return new PointImmutable(x, Y, A);
		}
		
		public virtual PointImmutable WithY(double y)
		{
			return new PointImmutable(X, y, A);
		}
		
		public virtual PointImmutable WithA(PointImmutable a)
		{
			return new PointImmutable(X, Y, a);
		}
		
		#region Clone
		
#pragma warning disable 109
		public new PointImmutable Clone()
#pragma warning restore 109
		{
			return (PointImmutable) ((ICloneable) this).Clone();
		}
		
		object ICloneable.Clone()
		{
			return new PointImmutable((PointImmutable) this);
		}
		
		#endregion Clone
		
		#region Equals
		
		public bool Equals(PointImmutable other)
		{
			if (ReferenceEquals(null, other)) return false;
			if (ReferenceEquals(this, other)) return true;
			return ((X == null && other.X == null) || (X != null && other.X != null && Math.Abs((double) X - (double) other.X) < 1E-06))
			       && Math.Abs(Y - other.Y) < 1E-06
			       && Equals(A, other.A)
			       ;
		}
		
		public override bool Equals(object obj)
		{
			if (ReferenceEquals(null, obj)) return false;
			if (ReferenceEquals(this, obj)) return true;
			if (obj.GetType() != typeof (PointImmutable)) return false;
			return Equals((PointImmutable) obj);
		}
		
		public override int GetHashCode()
		{
			unchecked
			{
				int result = 0;
				result = (result * 397) ^ (X != null ? X.GetHashCode() : 0);
				result = (result * 397) ^ Y.GetHashCode();
				result = (result * 397) ^ (A != null ? A.GetHashCode() : 0);
				return result;
			}
		}
		
		public static bool operator ==(BasePointImmutable left, BasePointImmutable right)
		{
			return Equals(left, right);
		}
		
		public static bool operator !=(BasePointImmutable left, BasePointImmutable right)
		{
			return !Equals(left, right);
		}
		
		#endregion Equals
	}
	
}
