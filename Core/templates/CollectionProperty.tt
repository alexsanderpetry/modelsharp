<#@ template language="C#" inherits="TemplateUtils" #>
<#@ import namespace="org.pescuma.ModelSharp.Core.model" #>
<#@ parameter name="it" type="org.pescuma.ModelSharp.Core.model.CollectionInfo" #>
<# ForEach("Annotation", it.FieldAnnotations); #>
<# if (it.ExposeAsReadOnly) { #>
		protected readonly <#= it.TypeName #> <#= it.FieldName #>;

		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private <#= it.ExposedTypeName #> <#= it.ExposedFieldName #>;
<# } else { #>
		private <# if (it.ReadOnly) { #>readonly <# } #><#= it.TypeName #> <#= it.FieldName #>;
<# } #>

<# if (it.Documentation != null) { #>
		/// <summary>
		/// <#= it.Documentation #>
		/// </summary>
<# } #>
<# ForEach("Annotation", it.Annotations); #>
		public <#= it.ExposedTypeName #> <#= it.Name #> 
		{
<# ForEach("Annotation", it.PropGetAnnotations); #>
			<# if (it.GetterVisibility != null) { #><#= it.GetterVisibility #> <# } #>get{ return <#= it.Getter.Name #>(); }
		}
<# if (it.LazyInitializer != null) { #>

<# ForEach("Annotation", it.LazyInitializer.Annotations); #>
		protected virtual <#= it.LazyInitializer.TypeName #> <#= it.LazyInitializer.Name #>() 
		{
			if (this.<#= it.FieldName #> != null)
				return;

			this.<#= it.FieldName #> = new <#= it.TypeName #>();
			Add<#= it.Name #>ListListeners(this.<#= it.FieldName #>);
		}
<# } #>
<# if (it.ExposedLazyInitializer != null) { #>

<# ForEach("Annotation", it.ExposedLazyInitializer.Annotations); #>
		protected virtual <#= it.ExposedLazyInitializer.TypeName #> <#= it.ExposedLazyInitializer.Name #>() 
		{
			if (this.<#= it.ExposedFieldName #> != null)
				return;

			this.<#= it.ExposedFieldName #> = new <#= it.ExposedTypeName #>(this.<#= it.FieldName #>);
		}
<# } #>

<# ForEach("Annotation", it.Getter.Annotations); #>
		protected virtual <#= it.Getter.TypeName #> <#= it.Getter.Name #>()
		{
<# if (it.LazyInitializer != null) { #>
			<#= it.LazyInitializer.Name #>();
<# } #>
<# if (it.ExposedLazyInitializer != null) { #>
			<#= it.ExposedLazyInitializer.Name #>();
<# } #>
			return this.<#= it.ExposedFieldName #>;
		}

		private void Add<#= it.Name #>ListListeners(object child)
		{
			if (child == null)
				return;

			var notifyPropertyChanging = child as INotifyPropertyChanging;
			if (notifyPropertyChanging != null)
				notifyPropertyChanging.PropertyChanging += <#= it.Name #>ListPropertyChangingEventHandler;

			var notifyPropertyChanged = child as INotifyPropertyChanged;
			if (notifyPropertyChanged != null)
				notifyPropertyChanged.PropertyChanged += <#= it.Name #>ListPropertyChangedEventHandler;
<# if (it.ContentsType.CanListenTo) { #>

			var notifyChildPropertyChanged = child as INotifyCollectionChanged;
			if (notifyChildPropertyChanged != null)
				notifyChildPropertyChanged.CollectionChanged += <#= it.Name #>ListChangedEventHandler;

			foreach (var item in child)
				Add<#= it.Name #>ItemListeners(item);
<# } #>
		}

		private void <#= it.Name #>ListPropertyChangingEventHandler(object sender, PropertyChangingEventArgs e)
		{
			if (e.PropertyName != <#= it.TypeName #>.PROPERTIES.ITEMS)
				return;

			NotifyPropertyChanging(PROPERTIES.<#= it.DefineName #>);
		}

		private void <#= it.Name #>ListPropertyChangedEventHandler(object sender, PropertyChangedEventArgs e)
		{
			if (e.PropertyName != <#= it.TypeName #>.PROPERTIES.ITEMS)
				return;

			NotifyPropertyChanged(PROPERTIES.<#= it.DefineName #>);
		}
<# if (it.ContentsType.CanListenTo) { #>

		private void <#= it.Name #>ListChangedEventHandler(object sender, NotifyCollectionChangedEventArgs e)
		{
			switch (e.Action)
			{
				case NotifyCollectionChangedAction.Add:
				case NotifyCollectionChangedAction.Remove:
				case NotifyCollectionChangedAction.Replace:
					
					if ((e.OldItems == null || e.OldItems.Count == 0) 
							&& (e.NewItems == null || e.NewItems.Count == 0))
						throw new InvalidOperationException();

					if (e.OldItems != null)
						foreach (var item in e.OldItems)
							Remove<#= it.Name #>ItemListeners(item);

					if (e.NewItems != null)
						foreach (var item in e.NewItems)
							Add<#= it.Name #>ItemListeners(item);

					break;
				case NotifyCollectionChangedAction.Move:
					// Do nothing
					break;
				default:
					// NotifyCollectionChangedAction.Reset: The list should not fire this or 
					// we can't control the items
					throw new InvalidOperationException();
			}
		}

		private void Remove<#= it.Name #>ItemListeners(object child)
		{
			if (child == null)
				return;

			var notifyPropertyChanging = child as INotifyPropertyChanging;
			if (notifyPropertyChanging != null)
				notifyPropertyChanging.PropertyChanging -= <#= it.Name #>ItemPropertyChangingEventHandler;

			var notifyChildPropertyChanging = child as INotifyChildPropertyChanging;
			if (notifyChildPropertyChanging != null)
				notifyChildPropertyChanging.ChildPropertyChanging -= <#= it.Name #>ItemChildPropertyChangingEventHandler;

			var notifyPropertyChanged = child as INotifyPropertyChanged;
			if (notifyPropertyChanged != null)
				notifyPropertyChanged.PropertyChanged -= <#= it.Name #>ItemPropertyChangedEventHandler;

			var notifyChildPropertyChanged = child as INotifyChildPropertyChanged;
			if (notifyChildPropertyChanged != null)
				notifyChildPropertyChanged.ChildPropertyChanged -= <#= it.Name #>ItemChildPropertyChangedEventHandler;
		}

		private void Add<#= it.Name #>ItemListeners(object child)
		{
			if (child == null)
				return;

			var notifyPropertyChanging = child as INotifyPropertyChanging;
			if (notifyPropertyChanging != null)
				notifyPropertyChanging.PropertyChanging += <#= it.Name #>ItemPropertyChangingEventHandler;

			var notifyChildPropertyChanging = child as INotifyChildPropertyChanging;
			if (notifyChildPropertyChanging != null)
				notifyChildPropertyChanging.ChildPropertyChanging += <#= it.Name #>ItemChildPropertyChangingEventHandler;

			var notifyPropertyChanged = child as INotifyPropertyChanged;
			if (notifyPropertyChanged != null)
				notifyPropertyChanged.PropertyChanged += <#= it.Name #>ItemPropertyChangedEventHandler;

			var notifyChildPropertyChanged = child as INotifyChildPropertyChanged;
			if (notifyChildPropertyChanged != null)
				notifyChildPropertyChanged.ChildPropertyChanged += <#= it.Name #>ItemChildPropertyChangedEventHandler;
		}

		private void <#= it.Name #>ItemPropertyChangingEventHandler(object sender, PropertyChangingEventArgs e)
		{
			NotifyChildPropertyChanging(PROPERTIES.<#= it.DefineName #>, sender, e);
		}

		private void <#= it.Name #>ItemChildPropertyChangingEventHandler(object sender, ChildPropertyChangingEventArgs e)
		{
			NotifyChildPropertyChanging(PROPERTIES.<#= it.DefineName #>, sender, e);
		}

		private void <#= it.Name #>ItemPropertyChangedEventHandler(object sender, PropertyChangedEventArgs e)
		{
			NotifyChildPropertyChanged(PROPERTIES.<#= it.DefineName #>, sender, e);
		}

		private void <#= it.Name #>ItemChildPropertyChangedEventHandler(object sender, ChildPropertyChangedEventArgs e)
		{
			NotifyChildPropertyChanged(PROPERTIES.<#= it.DefineName #>, sender, e);
		}
<# } #>