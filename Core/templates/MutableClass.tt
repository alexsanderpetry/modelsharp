<#@ template language="C#" inherits="TemplateUtils" #>
<#@ import namespace="org.pescuma.ModelSharp.Core.model" #>
<#@ parameter name="it" type="org.pescuma.ModelSharp.Core.model.TypeInfo" #>
<#@ parameter name="class" type="System.String" #>
// Automatically generated by Model#
// DO NOT EDIT THIS FILE

<# ForEach("CreateUsing", it.Using); #>

<# if (it.Package != null) { #>
namespace <#= it.Package #>
{

<# } #>
<# ForEach("Annotation", it.Annotations); #>
<# ForEach("Annotation", it.BaseOnlyAnnotations); #>
	public abstract class <#= it.ImplementationName #> <# if (it.Implements.Count > 0) { #>: <# ForEach(it.Implements, separator: ", "); #> <# } #>

	{
		#region Field Name Defines

		public class PROPERTIES
		{
<# ForEach("Define", it.Properties); #>
		}

		#endregion

		#region Constructors

		public <#= it.ImplementationName #>(<# ForEach("Param", it.ContructorArguments, separator: ", "); #>)
		{
<# ForEach("NotNullIfRequired", it.ContructorArguments); #>
<# ForEach("MutableInitField", it.NonComputedProperties); #>
<# ForEach("MutableParamToField", it.ContructorArguments); #>
		}

		public <#= it.ImplementationName #>(<#= it.ImplementationName #> other)
		{
<# ForEach("MutableOtherToField", it.NonComputedProperties); #>
		}

		#endregion

<# ForEach("Property", it.Properties); #>
		#region Get/Set by name and CopyFrom
		
		public object GetField(string fieldName)
		{
			switch (fieldName)
			{
<# ForEach("SwitchGetter", it.Properties); #>
			}

			throw new ArgumentException("No gettable field named " + fieldName);
		}

		public void SetField(string fieldName, object value)
		{
<# if (it.HasSettableProperties) { #>
			switch (fieldName)
			{
<# ForEach("SwitchSetter", it.Properties); #>
			}

<# } #>
			throw new ArgumentException("No settable field named " + fieldName);
		}

		public void CopyFrom(<#= it.Name #> other)
		{
<# ForEach("MutableOtherCopyToField", it.NonComputedProperties); #>
		}

		#endregion

		#region Property Notification

		public event PropertyChangingEventHandler PropertyChanging;

		public event ChildPropertyChangingEventHandler ChildPropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		public event ChildPropertyChangedEventHandler ChildPropertyChanged;

		protected void NotifyPropertyChanging(string propertyName)
		{
			PropertyChangingEventHandler handler = PropertyChanging;
			if (handler != null)
				handler(this, new PropertyChangingEventArgs(propertyName));
		}
		
		protected void NotifyChildPropertyChanging(string propertyName, object sender, PropertyChangingEventArgs e)
		{
			ChildPropertyChangingEventHandler handler = ChildPropertyChanging;
			if (handler != null)
				handler(sender, new ChildPropertyChangingEventArgs(this, propertyName, e));
		}

		protected void NotifyPropertyChanged(string propertyName)
		{
			PropertyChangedEventHandler handler = PropertyChanged;
			if (handler != null)
				handler(this, new PropertyChangedEventArgs(propertyName));
		}
		
		protected void NotifyChildPropertyChanged(string propertyName, object sender, PropertyChangedEventArgs e)
		{
			ChildPropertyChangedEventHandler handler = ChildPropertyChanged;
			if (handler != null)
				handler(sender, new ChildPropertyChangedEventArgs(this, propertyName, e));
		}

		#endregion
<# if (it.Cloneable) { #>
		
		#region Clone

		public <#= it.Name #> Clone()
		{
			return (<#= it.Name #>) ((ICloneable) this).Clone();
		}

		object ICloneable.Clone()
		{
			return new <#= it.Name #>((<#= it.Name #>) this);
		}

		#endregion
<# } #>
	}
<# if (it.Package != null) { #>

}
<# } #>