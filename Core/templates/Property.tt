<#@ template language="C#" inherits="TemplateUtils" #>
<#@ import namespace="org.pescuma.ModelSharp.Core.model" #>
<#@ parameter name="it" type="org.pescuma.ModelSharp.Core.model.PropertyInfo" #>
		#region Property <#= it.Name #>

<# ForEach("Annotation", it.FieldAnnotations); #>
		private <# if (it.ReadOnly) { #>readonly <# } #><#= it.TypeName #> <#= it.FieldName #>;

<# ForEach("Annotation", it.Annotations); #>
		public <#= it.TypeName #> <#= it.Name #> 
		{
<# if (it.Getter != null) { #>
<# ForEach("Annotation", it.PropGetAnnotations); #>
			<# if (it.GetterVisibility != null) { #><#= it.GetterVisibility #> <# } #>get{ return <#= it.Getter.Name #>(); }
<# 
} if (it.Setter != null) { #>
<# ForEach("Annotation", it.PropSetAnnotations); #>
			<# if (it.SetterVisibility != null) { #><#= it.SetterVisibility #> <# } #>set{ <#= it.Setter.Name #>(value); }
<# } #>
		}

<# if (it.LazyInitializer != null) { #>
<# ForEach("Annotation", it.LazyInitializer.Annotations); #>
		protected virtual <#= it.LazyInitializer.TypeName #> <#= it.LazyInitializer.Name #>() 
		{
			if (<#= it.FieldName #> != null)
				return;

<#		if (it.DefaultValue != null) { #>
			<#= it.FieldName #> = <#= it.DefaultValue #>;
<#		} else { #>
			<#= it.FieldName #> = new <#= it.TypeName #>();
<#		} #>
<#		if (it.CanListenTo) { #>
			Add<#= it.Name #>Listeners(<#= it.FieldName #>);
<#		} #>
<#		if (it.IsCollection) { #>
			Add<#= it.Name #>ListListeners(<#= it.FieldName #>);
<#		} #>
		}

<# } #>
<# if (it.Getter != null) { #>
<# ForEach("Annotation", it.Getter.Annotations); #>
		protected virtual <#= it.Getter.TypeName #> <#= it.Getter.Name #>()
		{
<# if (it.LazyInitializer != null) { #>
			<#= it.LazyInitializer.Name #>();
<# } #>
			return <#= it.FieldName #>;
		}

<# } #>
<# if (it.Setter != null) { #>
<# ForEach("Annotation", it.Setter.Annotations); #>
		protected virtual <#= it.Setter.TypeName #> <#= it.Setter.Name #>(<#= it.Setter.Parameters[0] #> <#= it.VarName #>) 
		{
<# if (it.AssertNotNull) { #>
			if (<#= it.VarName #> == null)
				throw new ArgumentException("<#= it.Name #> can't be null");
<# } #>
			if (<#= it.FieldName #> == <#= it.VarName #>)
				return false;

			NotifyPropertyChanging(PROPERTIES.<#= it.DefineName #>);

<# if (it.CanListenTo) { #>
			Remove<#= it.Name #>Listeners(<#= it.VarName #>);

<# } #>
			<#= it.FieldName #> = <#= it.VarName #>;

<# if (it.CanListenTo) { #>
			Add<#= it.Name #>Listeners(<#= it.VarName #>);

<# } #>
			NotifyPropertyChanged(PROPERTIES.<#= it.DefineName #>);

			return true;
		}

<# if (it.CanListenTo) { #>
		private void Remove<#= it.Name #>Listeners(object child)
		{
			if (child == null)
				return;

			var notifyPropertyChanging = child as INotifyPropertyChanging;
			if (notifyPropertyChanging != null)
				notifyPropertyChanging.PropertyChanging -= <#= it.Name #>PropertyChangingEventHandler;

			var notifyChildPropertyChanging = child as INotifyChildPropertyChanging;
			if (notifyChildPropertyChanging != null)
				notifyChildPropertyChanging.ChildPropertyChanging -= <#= it.Name #>ChildPropertyChangingEventHandler;

			var notifyPropertyChanged = child as INotifyPropertyChanged;
			if (notifyPropertyChanged != null)
				notifyPropertyChanged.PropertyChanged -= <#= it.Name #>PropertyChangedEventHandler;

			var notifyChildPropertyChanged = child as INotifyChildPropertyChanged;
			if (notifyChildPropertyChanged != null)
				notifyChildPropertyChanged.ChildPropertyChanged -= <#= it.Name #>ChildPropertyChangedEventHandler;
		}

<# } // if (it.CanListenTo) #>
<# } // if (it.Setter) #>
<# if (it.CanListenTo) { #>
		private void Add<#= it.Name #>Listeners(object child)
		{
			if (child == null)
				return;

			var notifyPropertyChanging = child as INotifyPropertyChanging;
			if (notifyPropertyChanging != null)
				notifyPropertyChanging.PropertyChanging += <#= it.Name #>PropertyChangingEventHandler;

			var notifyChildPropertyChanging = child as INotifyChildPropertyChanging;
			if (notifyChildPropertyChanging != null)
				notifyChildPropertyChanging.ChildPropertyChanging += <#= it.Name #>ChildPropertyChangingEventHandler;

			var notifyPropertyChanged = child as INotifyPropertyChanged;
			if (notifyPropertyChanged != null)
				notifyPropertyChanged.PropertyChanged += <#= it.Name #>PropertyChangedEventHandler;

			var notifyChildPropertyChanged = child as INotifyChildPropertyChanged;
			if (notifyChildPropertyChanged != null)
				notifyChildPropertyChanged.ChildPropertyChanged += <#= it.Name #>ChildPropertyChangedEventHandler;
		}

		private void <#= it.Name #>PropertyChangingEventHandler(object sender, PropertyChangingEventArgs e)
		{
			NotifyChildPropertyChanging(PROPERTIES.<#= it.DefineName #>, sender, e);
		}

		private void <#= it.Name #>ChildPropertyChangingEventHandler(object sender, ChildPropertyChangingEventArgs e)
		{
			NotifyChildPropertyChanging(PROPERTIES.<#= it.DefineName #>, sender, e);
		}

		private void <#= it.Name #>PropertyChangedEventHandler(object sender, PropertyChangedEventArgs e)
		{
			NotifyChildPropertyChanged(PROPERTIES.<#= it.DefineName #>, sender, e);
		}

		private void <#= it.Name #>ChildPropertyChangedEventHandler(object sender, ChildPropertyChangedEventArgs e)
		{
			NotifyChildPropertyChanged(PROPERTIES.<#= it.DefineName #>, sender, e);
		}

<# } // if (it.CanListenTo) #>
<# if (it.IsCollection) { 
	var col = (CollectionInfo) it;
	#>
		private void Add<#= col.Name #>ListListeners(object child)
		{
			if (child == null)
				return;

			var notifyPropertyChanging = child as INotifyPropertyChanging;
			if (notifyPropertyChanging != null)
				notifyPropertyChanging.PropertyChanging += <#= col.Name #>ListPropertyChangingEventHandler;

			var notifyPropertyChanged = child as INotifyPropertyChanged;
			if (notifyPropertyChanged != null)
				notifyPropertyChanged.PropertyChanged += <#= col.Name #>ListPropertyChangedEventHandler;
<# if (col.ContentsType.CanListenTo) { #>

			var notifyChildPropertyChanged = child as INotifyCollectionChanged;
			if (notifyChildPropertyChanged != null)
				notifyChildPropertyChanged.CollectionChanged += <#= col.Name #>ListChangedEventHandler;
<# } #>
		}

		private void <#= col.Name #>ListPropertyChangingEventHandler(object sender, PropertyChangingEventArgs e)
		{
			if (e.PropertyName != <#= col.TypeName #>.PROPERTIES.ITEMS)
				return;

			NotifyPropertyChanging(PROPERTIES.<#= col.DefineName #>);
		}

		private void <#= col.Name #>ListPropertyChangedEventHandler(object sender, PropertyChangedEventArgs e)
		{
			if (e.PropertyName != <#= col.TypeName #>.PROPERTIES.ITEMS)
				return;

			NotifyPropertyChanged(PROPERTIES.<#= col.DefineName #>);
		}

<# if (col.ContentsType.CanListenTo) { #>
		private void <#= col.Name #>ListChangedEventHandler(object sender, NotifyCollectionChangedEventArgs e)
		{
			switch (e.Action)
			{
				case NotifyCollectionChangedAction.Add:
				case NotifyCollectionChangedAction.Remove:
				case NotifyCollectionChangedAction.Replace:
					
					if ((e.OldItems == null || e.OldItems.Count == 0) 
							&& (e.NewItems == null || e.NewItems.Count == 0))
						throw new InvalidOperationException();

					if (e.OldItems != null)
						foreach (var item in e.OldItems)
							Remove<#= col.Name #>ItemListeners(item);

					if (e.NewItems != null)
						foreach (var item in e.NewItems)
							Add<#= col.Name #>ItemListeners(item);

					break;
				case NotifyCollectionChangedAction.Move:
					// Do nothing
					break;
				default:
					// NotifyCollectionChangedAction.Reset: The list should not fire this or 
					// we can't control the items
					throw new InvalidOperationException();
			}
		}

		private void Remove<#= col.Name #>ItemListeners(object child)
		{
			if (child == null)
				return;

			var notifyPropertyChanging = child as INotifyPropertyChanging;
			if (notifyPropertyChanging != null)
				notifyPropertyChanging.PropertyChanging -= <#= col.Name #>ItemPropertyChangingEventHandler;

			var notifyChildPropertyChanging = child as INotifyChildPropertyChanging;
			if (notifyChildPropertyChanging != null)
				notifyChildPropertyChanging.ChildPropertyChanging -= <#= col.Name #>ItemChildPropertyChangingEventHandler;

			var notifyPropertyChanged = child as INotifyPropertyChanged;
			if (notifyPropertyChanged != null)
				notifyPropertyChanged.PropertyChanged -= <#= col.Name #>ItemPropertyChangedEventHandler;

			var notifyChildPropertyChanged = child as INotifyChildPropertyChanged;
			if (notifyChildPropertyChanged != null)
				notifyChildPropertyChanged.ChildPropertyChanged -= <#= col.Name #>ItemChildPropertyChangedEventHandler;
		}

		private void Add<#= col.Name #>ItemListeners(object child)
		{
			if (child == null)
				return;

			var notifyPropertyChanging = child as INotifyPropertyChanging;
			if (notifyPropertyChanging != null)
				notifyPropertyChanging.PropertyChanging += <#= col.Name #>ItemPropertyChangingEventHandler;

			var notifyChildPropertyChanging = child as INotifyChildPropertyChanging;
			if (notifyChildPropertyChanging != null)
				notifyChildPropertyChanging.ChildPropertyChanging += <#= col.Name #>ItemChildPropertyChangingEventHandler;

			var notifyPropertyChanged = child as INotifyPropertyChanged;
			if (notifyPropertyChanged != null)
				notifyPropertyChanged.PropertyChanged += <#= col.Name #>ItemPropertyChangedEventHandler;

			var notifyChildPropertyChanged = child as INotifyChildPropertyChanged;
			if (notifyChildPropertyChanged != null)
				notifyChildPropertyChanged.ChildPropertyChanged += <#= col.Name #>ItemChildPropertyChangedEventHandler;
		}

		private void <#= col.Name #>ItemPropertyChangingEventHandler(object sender, PropertyChangingEventArgs e)
		{
			NotifyChildPropertyChanging(PROPERTIES.<#= col.DefineName #>, sender, e);
		}

		private void <#= col.Name #>ItemChildPropertyChangingEventHandler(object sender, ChildPropertyChangingEventArgs e)
		{
			NotifyChildPropertyChanging(PROPERTIES.<#= col.DefineName #>, sender, e);
		}

		private void <#= col.Name #>ItemPropertyChangedEventHandler(object sender, PropertyChangedEventArgs e)
		{
			NotifyChildPropertyChanged(PROPERTIES.<#= col.DefineName #>, sender, e);
		}

		private void <#= col.Name #>ItemChildPropertyChangedEventHandler(object sender, ChildPropertyChangedEventArgs e)
		{
			NotifyChildPropertyChanged(PROPERTIES.<#= col.DefineName #>, sender, e);
		}

<# } #>
<# } #>
		#endregion Property <#= it.Name #>

